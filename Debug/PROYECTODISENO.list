
PROYECTODISENO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800597c  0800597c  0001597c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a9c  08005a9c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005a9c  08005a9c  00015a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005aa4  08005aa4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005aa4  08005aa4  00015aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005aa8  08005aa8  00015aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000070  08005b1c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08005b1c  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012683  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000246c  00000000  00000000  00032723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00034b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  00035b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000276d7  00000000  00000000  00036a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012888  00000000  00000000  0005e0ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4c81  00000000  00000000  00070987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00165608  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045bc  00000000  00000000  00165658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005964 	.word	0x08005964

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005964 	.word	0x08005964

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <intialize_machine_states>:
extern uint8_t counter_50ms;
extern UART_HandleTypeDef huart2;
extern char rx_buffer [RX_BUFFER_LEN] ;
extern uint8_t rx_position_counter;

void intialize_machine_states( void ){
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	frequency_state = S1;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <intialize_machine_states+0x14>)
 800059a:	2201      	movs	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	2000008c 	.word	0x2000008c

080005ac <machine_states>:

void machine_states( void ){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	switch ( frequency_state ){
 80005b0:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <machine_states+0x4c>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b04      	cmp	r3, #4
 80005b6:	d81c      	bhi.n	80005f2 <machine_states+0x46>
 80005b8:	a201      	add	r2, pc, #4	; (adr r2, 80005c0 <machine_states+0x14>)
 80005ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005be:	bf00      	nop
 80005c0:	080005d5 	.word	0x080005d5
 80005c4:	080005db 	.word	0x080005db
 80005c8:	080005e1 	.word	0x080005e1
 80005cc:	080005e7 	.word	0x080005e7
 80005d0:	080005ed 	.word	0x080005ed
		case S0:
			led_off();
 80005d4:	f000 f812 	bl	80005fc <led_off>
			break;
 80005d8:	e00b      	b.n	80005f2 <machine_states+0x46>
		case S1:
			led_blink_5hz();
 80005da:	f000 f819 	bl	8000610 <led_blink_5hz>
			break;
 80005de:	e008      	b.n	80005f2 <machine_states+0x46>
		case S2:
			led_blink_2hz();
 80005e0:	f000 f828 	bl	8000634 <led_blink_2hz>
			break;
 80005e4:	e005      	b.n	80005f2 <machine_states+0x46>
		case S3:
			led_blink_1hz();
 80005e6:	f000 f837 	bl	8000658 <led_blink_1hz>
			break;
 80005ea:	e002      	b.n	80005f2 <machine_states+0x46>
		case S4:
			led_blink_05hz();
 80005ec:	f000 f846 	bl	800067c <led_blink_05hz>
	}
}
 80005f0:	e7ff      	b.n	80005f2 <machine_states+0x46>
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	2000008c 	.word	0x2000008c

080005fc <led_off>:

void led_off( void ){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	LED_OFF;
 8000600:	2200      	movs	r2, #0
 8000602:	2120      	movs	r1, #32
 8000604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000608:	f001 f874 	bl	80016f4 <HAL_GPIO_WritePin>
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}

08000610 <led_blink_5hz>:

void led_blink_5hz( void ){
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	if ( counter_50ms == 2 )
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <led_blink_5hz+0x20>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b02      	cmp	r3, #2
 800061a:	d107      	bne.n	800062c <led_blink_5hz+0x1c>
	{
		counter_50ms = 0;
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <led_blink_5hz+0x20>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000622:	2120      	movs	r1, #32
 8000624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000628:	f001 f87c 	bl	8001724 <HAL_GPIO_TogglePin>
	}
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000160 	.word	0x20000160

08000634 <led_blink_2hz>:


void led_blink_2hz( void ){
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	if ( counter_50ms == 5 )
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <led_blink_2hz+0x20>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b05      	cmp	r3, #5
 800063e:	d107      	bne.n	8000650 <led_blink_2hz+0x1c>
	{
		counter_50ms = 0;
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <led_blink_2hz+0x20>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000646:	2120      	movs	r1, #32
 8000648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064c:	f001 f86a 	bl	8001724 <HAL_GPIO_TogglePin>
	}
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000160 	.word	0x20000160

08000658 <led_blink_1hz>:

void led_blink_1hz( void ){
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	if ( counter_50ms == 10 )
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <led_blink_1hz+0x20>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b0a      	cmp	r3, #10
 8000662:	d107      	bne.n	8000674 <led_blink_1hz+0x1c>
	{
		counter_50ms = 0;
 8000664:	4b04      	ldr	r3, [pc, #16]	; (8000678 <led_blink_1hz+0x20>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800066a:	2120      	movs	r1, #32
 800066c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000670:	f001 f858 	bl	8001724 <HAL_GPIO_TogglePin>
	}
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000160 	.word	0x20000160

0800067c <led_blink_05hz>:

void led_blink_05hz( void ){
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	if ( counter_50ms == 20 )
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <led_blink_05hz+0x20>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b14      	cmp	r3, #20
 8000686:	d107      	bne.n	8000698 <led_blink_05hz+0x1c>
	{
		counter_50ms = 0;
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <led_blink_05hz+0x20>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800068e:	2120      	movs	r1, #32
 8000690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000694:	f001 f846 	bl	8001724 <HAL_GPIO_TogglePin>
	}
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000160 	.word	0x20000160

080006a0 <change_to_next_state>:

void change_to_next_state( void ){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b0c0      	sub	sp, #256	; 0x100
 80006a4:	af00      	add	r7, sp, #0

	counter_50ms = 0;
 80006a6:	4b41      	ldr	r3, [pc, #260]	; (80007ac <change_to_next_state+0x10c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
	char data_to_transmit[TX_BUFFER_LEN];
	uint8_t str_len;

	switch ( frequency_state ){
 80006ac:	4b40      	ldr	r3, [pc, #256]	; (80007b0 <change_to_next_state+0x110>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b04      	cmp	r3, #4
 80006b2:	d876      	bhi.n	80007a2 <change_to_next_state+0x102>
 80006b4:	a201      	add	r2, pc, #4	; (adr r2, 80006bc <change_to_next_state+0x1c>)
 80006b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ba:	bf00      	nop
 80006bc:	080006d1 	.word	0x080006d1
 80006c0:	080006fb 	.word	0x080006fb
 80006c4:	08000725 	.word	0x08000725
 80006c8:	0800074f 	.word	0x0800074f
 80006cc:	08000779 	.word	0x08000779
			case S0:
				frequency_state = S1;
 80006d0:	4b37      	ldr	r3, [pc, #220]	; (80007b0 <change_to_next_state+0x110>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	701a      	strb	r2, [r3, #0]
				str_len = sprintf(&data_to_transmit[0], " The frequency is: 5 Hz");
 80006d6:	463b      	mov	r3, r7
 80006d8:	4936      	ldr	r1, [pc, #216]	; (80007b4 <change_to_next_state+0x114>)
 80006da:	4618      	mov	r0, r3
 80006dc:	f004 fcd4 	bl	8005088 <siprintf>
 80006e0:	4603      	mov	r3, r0
 80006e2:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
				HAL_UART_Transmit(&huart2, (const uint8_t *) &data_to_transmit[0], str_len, 1000);
 80006e6:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	4639      	mov	r1, r7
 80006ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f2:	4831      	ldr	r0, [pc, #196]	; (80007b8 <change_to_next_state+0x118>)
 80006f4:	f003 f872 	bl	80037dc <HAL_UART_Transmit>
				break;
 80006f8:	e053      	b.n	80007a2 <change_to_next_state+0x102>
			case S1:
				str_len = sprintf(&data_to_transmit[0], " The frequency is: 2 Hz");
 80006fa:	463b      	mov	r3, r7
 80006fc:	492f      	ldr	r1, [pc, #188]	; (80007bc <change_to_next_state+0x11c>)
 80006fe:	4618      	mov	r0, r3
 8000700:	f004 fcc2 	bl	8005088 <siprintf>
 8000704:	4603      	mov	r3, r0
 8000706:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
				HAL_UART_Transmit(&huart2, (const uint8_t *) &data_to_transmit[0], str_len, 1000);
 800070a:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800070e:	b29a      	uxth	r2, r3
 8000710:	4639      	mov	r1, r7
 8000712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000716:	4828      	ldr	r0, [pc, #160]	; (80007b8 <change_to_next_state+0x118>)
 8000718:	f003 f860 	bl	80037dc <HAL_UART_Transmit>
				frequency_state = S2;
 800071c:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <change_to_next_state+0x110>)
 800071e:	2202      	movs	r2, #2
 8000720:	701a      	strb	r2, [r3, #0]
				break;
 8000722:	e03e      	b.n	80007a2 <change_to_next_state+0x102>
			case S2:
				frequency_state = S3;
 8000724:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <change_to_next_state+0x110>)
 8000726:	2203      	movs	r2, #3
 8000728:	701a      	strb	r2, [r3, #0]
				str_len = sprintf(&data_to_transmit[0], " The frequency is: 1 Hz");
 800072a:	463b      	mov	r3, r7
 800072c:	4924      	ldr	r1, [pc, #144]	; (80007c0 <change_to_next_state+0x120>)
 800072e:	4618      	mov	r0, r3
 8000730:	f004 fcaa 	bl	8005088 <siprintf>
 8000734:	4603      	mov	r3, r0
 8000736:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
				HAL_UART_Transmit(&huart2, (const uint8_t *) &data_to_transmit[0], str_len, 1000);
 800073a:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800073e:	b29a      	uxth	r2, r3
 8000740:	4639      	mov	r1, r7
 8000742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000746:	481c      	ldr	r0, [pc, #112]	; (80007b8 <change_to_next_state+0x118>)
 8000748:	f003 f848 	bl	80037dc <HAL_UART_Transmit>
				break;
 800074c:	e029      	b.n	80007a2 <change_to_next_state+0x102>
			case S3:
				frequency_state = S4;
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <change_to_next_state+0x110>)
 8000750:	2204      	movs	r2, #4
 8000752:	701a      	strb	r2, [r3, #0]
				str_len = sprintf(&data_to_transmit[0], " The frequency is: 0.5 Hz");
 8000754:	463b      	mov	r3, r7
 8000756:	491b      	ldr	r1, [pc, #108]	; (80007c4 <change_to_next_state+0x124>)
 8000758:	4618      	mov	r0, r3
 800075a:	f004 fc95 	bl	8005088 <siprintf>
 800075e:	4603      	mov	r3, r0
 8000760:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
				HAL_UART_Transmit(&huart2, (const uint8_t *) &data_to_transmit[0], str_len, 1000);
 8000764:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8000768:	b29a      	uxth	r2, r3
 800076a:	4639      	mov	r1, r7
 800076c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000770:	4811      	ldr	r0, [pc, #68]	; (80007b8 <change_to_next_state+0x118>)
 8000772:	f003 f833 	bl	80037dc <HAL_UART_Transmit>
				break;
 8000776:	e014      	b.n	80007a2 <change_to_next_state+0x102>
			case S4:
				frequency_state = S0;
 8000778:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <change_to_next_state+0x110>)
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
				str_len = sprintf(&data_to_transmit[0], " The LED is OFF");
 800077e:	463b      	mov	r3, r7
 8000780:	4911      	ldr	r1, [pc, #68]	; (80007c8 <change_to_next_state+0x128>)
 8000782:	4618      	mov	r0, r3
 8000784:	f004 fc80 	bl	8005088 <siprintf>
 8000788:	4603      	mov	r3, r0
 800078a:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
				HAL_UART_Transmit(&huart2, (const uint8_t *) &data_to_transmit[0], str_len, 1000);
 800078e:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8000792:	b29a      	uxth	r2, r3
 8000794:	4639      	mov	r1, r7
 8000796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079a:	4807      	ldr	r0, [pc, #28]	; (80007b8 <change_to_next_state+0x118>)
 800079c:	f003 f81e 	bl	80037dc <HAL_UART_Transmit>
				break;
 80007a0:	bf00      	nop
		}
}
 80007a2:	bf00      	nop
 80007a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000160 	.word	0x20000160
 80007b0:	2000008c 	.word	0x2000008c
 80007b4:	0800597c 	.word	0x0800597c
 80007b8:	200000dc 	.word	0x200000dc
 80007bc:	08005994 	.word	0x08005994
 80007c0:	080059ac 	.word	0x080059ac
 80007c4:	080059c4 	.word	0x080059c4
 80007c8:	080059e0 	.word	0x080059e0

080007cc <re_init_comunication>:
 static void re_init_comunication (void){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	 HAL_UART_AbortReceive_IT(&huart2);
 80007d0:	480b      	ldr	r0, [pc, #44]	; (8000800 <re_init_comunication+0x34>)
 80007d2:	f003 f8ed 	bl	80039b0 <HAL_UART_AbortReceive_IT>
	 rx_position_counter = 0;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <re_init_comunication+0x38>)
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]
	 memset((void *) &rx_buffer[0], '\0', RX_BUFFER_LEN);
 80007dc:	22ff      	movs	r2, #255	; 0xff
 80007de:	2100      	movs	r1, #0
 80007e0:	4809      	ldr	r0, [pc, #36]	; (8000808 <re_init_comunication+0x3c>)
 80007e2:	f004 fc49 	bl	8005078 <memset>
	 HAL_UART_Receive_IT(&huart2, (uint8_t *) &rx_buffer[rx_position_counter], 1);
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <re_init_comunication+0x38>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	461a      	mov	r2, r3
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <re_init_comunication+0x3c>)
 80007ee:	4413      	add	r3, r2
 80007f0:	2201      	movs	r2, #1
 80007f2:	4619      	mov	r1, r3
 80007f4:	4802      	ldr	r0, [pc, #8]	; (8000800 <re_init_comunication+0x34>)
 80007f6:	f003 f885 	bl	8003904 <HAL_UART_Receive_IT>
 }
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200000dc 	.word	0x200000dc
 8000804:	20000264 	.word	0x20000264
 8000808:	20000164 	.word	0x20000164

0800080c <compare_string>:
void compare_string( void ){
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0

	 if ( strcmp("FR1" , &rx_buffer[0]) == 0 ){
 8000810:	492d      	ldr	r1, [pc, #180]	; (80008c8 <compare_string+0xbc>)
 8000812:	482e      	ldr	r0, [pc, #184]	; (80008cc <compare_string+0xc0>)
 8000814:	f7ff fcdc 	bl	80001d0 <strcmp>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d10a      	bne.n	8000834 <compare_string+0x28>
		 frequency_state = S1;
 800081e:	4b2c      	ldr	r3, [pc, #176]	; (80008d0 <compare_string+0xc4>)
 8000820:	2201      	movs	r2, #1
 8000822:	701a      	strb	r2, [r3, #0]
		 comand_verify();
 8000824:	f000 f860 	bl	80008e8 <comand_verify>
		 counter_50ms = 0;
 8000828:	4b2a      	ldr	r3, [pc, #168]	; (80008d4 <compare_string+0xc8>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
		 re_init_comunication();
 800082e:	f7ff ffcd 	bl	80007cc <re_init_comunication>
		 frequency_state = S0;
		 comand_verify();
		 counter_50ms = 0;
		 re_init_comunication();
	 }
 }
 8000832:	e046      	b.n	80008c2 <compare_string+0xb6>
	 else if( strcmp("FREQ2" , &rx_buffer[0]) == 0 ){
 8000834:	4924      	ldr	r1, [pc, #144]	; (80008c8 <compare_string+0xbc>)
 8000836:	4828      	ldr	r0, [pc, #160]	; (80008d8 <compare_string+0xcc>)
 8000838:	f7ff fcca 	bl	80001d0 <strcmp>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d10a      	bne.n	8000858 <compare_string+0x4c>
		 frequency_state = S2;
 8000842:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <compare_string+0xc4>)
 8000844:	2202      	movs	r2, #2
 8000846:	701a      	strb	r2, [r3, #0]
		 comand_verify();
 8000848:	f000 f84e 	bl	80008e8 <comand_verify>
		 counter_50ms = 0;
 800084c:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <compare_string+0xc8>)
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
		 re_init_comunication();
 8000852:	f7ff ffbb 	bl	80007cc <re_init_comunication>
 }
 8000856:	e034      	b.n	80008c2 <compare_string+0xb6>
	 else if( strcmp("FR3" , &rx_buffer[0]) == 0 ){
 8000858:	491b      	ldr	r1, [pc, #108]	; (80008c8 <compare_string+0xbc>)
 800085a:	4820      	ldr	r0, [pc, #128]	; (80008dc <compare_string+0xd0>)
 800085c:	f7ff fcb8 	bl	80001d0 <strcmp>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d10a      	bne.n	800087c <compare_string+0x70>
		 frequency_state = S3;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <compare_string+0xc4>)
 8000868:	2203      	movs	r2, #3
 800086a:	701a      	strb	r2, [r3, #0]
		 comand_verify();
 800086c:	f000 f83c 	bl	80008e8 <comand_verify>
		 counter_50ms = 0;
 8000870:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <compare_string+0xc8>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
		 re_init_comunication();
 8000876:	f7ff ffa9 	bl	80007cc <re_init_comunication>
 }
 800087a:	e022      	b.n	80008c2 <compare_string+0xb6>
	 else if( strcmp("FREQ4" , &rx_buffer[0]) == 0 ){
 800087c:	4912      	ldr	r1, [pc, #72]	; (80008c8 <compare_string+0xbc>)
 800087e:	4818      	ldr	r0, [pc, #96]	; (80008e0 <compare_string+0xd4>)
 8000880:	f7ff fca6 	bl	80001d0 <strcmp>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d10a      	bne.n	80008a0 <compare_string+0x94>
		 frequency_state = S4;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <compare_string+0xc4>)
 800088c:	2204      	movs	r2, #4
 800088e:	701a      	strb	r2, [r3, #0]
		 comand_verify();
 8000890:	f000 f82a 	bl	80008e8 <comand_verify>
		 counter_50ms = 0;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <compare_string+0xc8>)
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
		 re_init_comunication();
 800089a:	f7ff ff97 	bl	80007cc <re_init_comunication>
 }
 800089e:	e010      	b.n	80008c2 <compare_string+0xb6>
	 else if( strcmp("OFF" , &rx_buffer[0]) == 0 ){
 80008a0:	4909      	ldr	r1, [pc, #36]	; (80008c8 <compare_string+0xbc>)
 80008a2:	4810      	ldr	r0, [pc, #64]	; (80008e4 <compare_string+0xd8>)
 80008a4:	f7ff fc94 	bl	80001d0 <strcmp>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d109      	bne.n	80008c2 <compare_string+0xb6>
		 frequency_state = S0;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <compare_string+0xc4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
		 comand_verify();
 80008b4:	f000 f818 	bl	80008e8 <comand_verify>
		 counter_50ms = 0;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <compare_string+0xc8>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
		 re_init_comunication();
 80008be:	f7ff ff85 	bl	80007cc <re_init_comunication>
 }
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000164 	.word	0x20000164
 80008cc:	080059f0 	.word	0x080059f0
 80008d0:	2000008c 	.word	0x2000008c
 80008d4:	20000160 	.word	0x20000160
 80008d8:	080059f4 	.word	0x080059f4
 80008dc:	080059fc 	.word	0x080059fc
 80008e0:	08005a00 	.word	0x08005a00
 80008e4:	08005a08 	.word	0x08005a08

080008e8 <comand_verify>:


void comand_verify(void){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b0c0      	sub	sp, #256	; 0x100
 80008ec:	af00      	add	r7, sp, #0
	char data_to_transmit[TX_BUFFER_LEN];
	uint8_t str_len;
	str_len = sprintf(&data_to_transmit[0], "Command received");
 80008ee:	463b      	mov	r3, r7
 80008f0:	490a      	ldr	r1, [pc, #40]	; (800091c <comand_verify+0x34>)
 80008f2:	4618      	mov	r0, r3
 80008f4:	f004 fbc8 	bl	8005088 <siprintf>
 80008f8:	4603      	mov	r3, r0
 80008fa:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	HAL_UART_Transmit(&huart2, (const uint8_t *) &data_to_transmit[0], str_len, 1000);
 80008fe:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8000902:	b29a      	uxth	r2, r3
 8000904:	4639      	mov	r1, r7
 8000906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <comand_verify+0x38>)
 800090c:	f002 ff66 	bl	80037dc <HAL_UART_Transmit>
}
 8000910:	bf00      	nop
 8000912:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	08005a0c 	.word	0x08005a0c
 8000920:	200000dc 	.word	0x200000dc

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000928:	f000 fb2e 	bl	8000f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092c:	f000 f82e 	bl	800098c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000930:	f000 f902 	bl	8000b38 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000934:	f000 f87c 	bl	8000a30 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000938:	f000 f8ca 	bl	8000ad0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800093c:	480e      	ldr	r0, [pc, #56]	; (8000978 <main+0x54>)
 800093e:	f002 fa9b 	bl	8002e78 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  intialize_machine_states();
 8000942:	f7ff fe27 	bl	8000594 <intialize_machine_states>
  rx_position_counter = 0;
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <main+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart2, (uint8_t *) &rx_buffer[rx_position_counter], 1);
 800094c:	4b0b      	ldr	r3, [pc, #44]	; (800097c <main+0x58>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <main+0x5c>)
 8000954:	4413      	add	r3, r2
 8000956:	2201      	movs	r2, #1
 8000958:	4619      	mov	r1, r3
 800095a:	480a      	ldr	r0, [pc, #40]	; (8000984 <main+0x60>)
 800095c:	f002 ffd2 	bl	8003904 <HAL_UART_Receive_IT>
  while (1)
  {
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  machine_states();
 8000960:	f7ff fe24 	bl	80005ac <machine_states>
#ifdef UART_ACTIVE
	  if (uart_flag == ACTIVATED){
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <main+0x64>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d1f9      	bne.n	8000960 <main+0x3c>
		  compare_string();
 800096c:	f7ff ff4e 	bl	800080c <compare_string>
		  uart_flag = RELEASED;
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <main+0x64>)
 8000972:	2201      	movs	r2, #1
 8000974:	701a      	strb	r2, [r3, #0]
	  machine_states();
 8000976:	e7f3      	b.n	8000960 <main+0x3c>
 8000978:	20000090 	.word	0x20000090
 800097c:	20000264 	.word	0x20000264
 8000980:	20000164 	.word	0x20000164
 8000984:	200000dc 	.word	0x200000dc
 8000988:	20000263 	.word	0x20000263

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b096      	sub	sp, #88	; 0x58
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	2244      	movs	r2, #68	; 0x44
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f004 fb6c 	bl	8005078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	463b      	mov	r3, r7
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009b2:	f000 fef7 	bl	80017a4 <HAL_PWREx_ControlVoltageScaling>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009bc:	f000 f970 	bl	8000ca0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c0:	2302      	movs	r3, #2
 80009c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ca:	2310      	movs	r3, #16
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ce:	2302      	movs	r3, #2
 80009d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009d2:	2302      	movs	r3, #2
 80009d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009d6:	2301      	movs	r3, #1
 80009d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009da:	230a      	movs	r3, #10
 80009dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009de:	2307      	movs	r3, #7
 80009e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009e2:	2302      	movs	r3, #2
 80009e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009e6:	2302      	movs	r3, #2
 80009e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 ff2e 	bl	8001850 <HAL_RCC_OscConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0x72>
  {
    Error_Handler();
 80009fa:	f000 f951 	bl	8000ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fe:	230f      	movs	r3, #15
 8000a00:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a02:	2303      	movs	r3, #3
 8000a04:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a12:	463b      	mov	r3, r7
 8000a14:	2104      	movs	r1, #4
 8000a16:	4618      	mov	r0, r3
 8000a18:	f001 faf6 	bl	8002008 <HAL_RCC_ClockConfig>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a22:	f000 f93d 	bl	8000ca0 <Error_Handler>
  }
}
 8000a26:	bf00      	nop
 8000a28:	3758      	adds	r7, #88	; 0x58
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a36:	f107 0310 	add.w	r3, r7, #16
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <MX_TIM3_Init+0x98>)
 8000a50:	4a1e      	ldr	r2, [pc, #120]	; (8000acc <MX_TIM3_Init+0x9c>)
 8000a52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000a54:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <MX_TIM3_Init+0x98>)
 8000a56:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_TIM3_Init+0x98>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_TIM3_Init+0x98>)
 8000a64:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6a:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <MX_TIM3_Init+0x98>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a70:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <MX_TIM3_Init+0x98>)
 8000a72:	2280      	movs	r2, #128	; 0x80
 8000a74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a76:	4814      	ldr	r0, [pc, #80]	; (8000ac8 <MX_TIM3_Init+0x98>)
 8000a78:	f002 f9a6 	bl	8002dc8 <HAL_TIM_Base_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000a82:	f000 f90d 	bl	8000ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	4619      	mov	r1, r3
 8000a92:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <MX_TIM3_Init+0x98>)
 8000a94:	f002 fb7f 	bl	8003196 <HAL_TIM_ConfigClockSource>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000a9e:	f000 f8ff 	bl	8000ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	4619      	mov	r1, r3
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <MX_TIM3_Init+0x98>)
 8000ab0:	f002 fda0 	bl	80035f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000aba:	f000 f8f1 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	3720      	adds	r7, #32
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000090 	.word	0x20000090
 8000acc:	40000400 	.word	0x40000400

08000ad0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <MX_USART2_UART_Init+0x60>)
 8000ad6:	4a17      	ldr	r2, [pc, #92]	; (8000b34 <MX_USART2_UART_Init+0x64>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <MX_USART2_UART_Init+0x60>)
 8000adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <MX_USART2_UART_Init+0x60>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_USART2_UART_Init+0x60>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <MX_USART2_UART_Init+0x60>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <MX_USART2_UART_Init+0x60>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <MX_USART2_UART_Init+0x60>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <MX_USART2_UART_Init+0x60>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <MX_USART2_UART_Init+0x60>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <MX_USART2_UART_Init+0x60>)
 8000b0e:	2210      	movs	r2, #16
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000b12:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <MX_USART2_UART_Init+0x60>)
 8000b14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b18:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_USART2_UART_Init+0x60>)
 8000b1c:	f002 fe10 	bl	8003740 <HAL_UART_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000b26:	f000 f8bb 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200000dc 	.word	0x200000dc
 8000b34:	40004400 	.word	0x40004400

08000b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	4b36      	ldr	r3, [pc, #216]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	4a35      	ldr	r2, [pc, #212]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000b54:	f043 0304 	orr.w	r3, r3, #4
 8000b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5a:	4b33      	ldr	r3, [pc, #204]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	f003 0304 	and.w	r3, r3, #4
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b66:	4b30      	ldr	r3, [pc, #192]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	4a2f      	ldr	r2, [pc, #188]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b72:	4b2d      	ldr	r3, [pc, #180]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	4a29      	ldr	r2, [pc, #164]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8a:	4b27      	ldr	r3, [pc, #156]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	4a23      	ldr	r2, [pc, #140]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba2:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <MX_GPIO_Init+0xf0>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2122      	movs	r1, #34	; 0x22
 8000bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb6:	f000 fd9d 	bl	80016f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bc0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4816      	ldr	r0, [pc, #88]	; (8000c2c <MX_GPIO_Init+0xf4>)
 8000bd2:	f000 fbe5 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Temp_sensor_Pin */
  GPIO_InitStruct.Pin = Temp_sensor_Pin;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Temp_sensor_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bec:	f000 fbd8 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LD2_Pin;
 8000bf0:	2322      	movs	r3, #34	; 0x22
 8000bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0a:	f000 fbc9 	bl	80013a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2028      	movs	r0, #40	; 0x28
 8000c14:	f000 fb0f 	bl	8001236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c18:	2028      	movs	r0, #40	; 0x28
 8000c1a:	f000 fb28 	bl	800126e <HAL_NVIC_EnableIRQ>

}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	; 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	48000800 	.word	0x48000800

08000c30 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
#ifdef BUTTON_ACTIVE
  if (GPIO_Pin == B1_Pin){
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c40:	d101      	bne.n	8000c46 <HAL_GPIO_EXTI_Callback+0x16>
	  change_to_next_state();
 8000c42:	f7ff fd2d 	bl	80006a0 <change_to_next_state>
  }
#endif
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <HAL_UART_RxCpltCallback>:
#ifdef UART_ACTIVE
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

	if ( huart == &huart2){
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <HAL_UART_RxCpltCallback+0x40>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d112      	bne.n	8000c86 <HAL_UART_RxCpltCallback+0x36>
		rx_position_counter++;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <HAL_UART_RxCpltCallback+0x44>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <HAL_UART_RxCpltCallback+0x44>)
 8000c6a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, (uint8_t *) &rx_buffer[rx_position_counter], 1);
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <HAL_UART_RxCpltCallback+0x44>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <HAL_UART_RxCpltCallback+0x48>)
 8000c74:	4413      	add	r3, r2
 8000c76:	2201      	movs	r2, #1
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <HAL_UART_RxCpltCallback+0x40>)
 8000c7c:	f002 fe42 	bl	8003904 <HAL_UART_Receive_IT>
		uart_flag = ACTIVATED;
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_UART_RxCpltCallback+0x4c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
	}

}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200000dc 	.word	0x200000dc
 8000c94:	20000264 	.word	0x20000264
 8000c98:	20000164 	.word	0x20000164
 8000c9c:	20000263 	.word	0x20000263

08000ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
}
 8000ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <Error_Handler+0x8>
	...

08000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <HAL_MspInit+0x44>)
 8000cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb6:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <HAL_MspInit+0x44>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6613      	str	r3, [r2, #96]	; 0x60
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <HAL_MspInit+0x44>)
 8000cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <HAL_MspInit+0x44>)
 8000ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cce:	4a08      	ldr	r2, [pc, #32]	; (8000cf0 <HAL_MspInit+0x44>)
 8000cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_MspInit+0x44>)
 8000cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <HAL_TIM_Base_MspInit+0x44>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d113      	bne.n	8000d2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d06:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <HAL_TIM_Base_MspInit+0x48>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0a:	4a0c      	ldr	r2, [pc, #48]	; (8000d3c <HAL_TIM_Base_MspInit+0x48>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6593      	str	r3, [r2, #88]	; 0x58
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_TIM_Base_MspInit+0x48>)
 8000d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	201d      	movs	r0, #29
 8000d24:	f000 fa87 	bl	8001236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d28:	201d      	movs	r0, #29
 8000d2a:	f000 faa0 	bl	800126e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40000400 	.word	0x40000400
 8000d3c:	40021000 	.word	0x40021000

08000d40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b0ac      	sub	sp, #176	; 0xb0
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2288      	movs	r2, #136	; 0x88
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f004 f989 	bl	8005078 <memset>
  if(huart->Instance==USART2)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a25      	ldr	r2, [pc, #148]	; (8000e00 <HAL_UART_MspInit+0xc0>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d143      	bne.n	8000df8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d70:	2302      	movs	r3, #2
 8000d72:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f001 fb67 	bl	8002450 <HAL_RCCEx_PeriphCLKConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d88:	f7ff ff8a 	bl	8000ca0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <HAL_UART_MspInit+0xc4>)
 8000d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d90:	4a1c      	ldr	r2, [pc, #112]	; (8000e04 <HAL_UART_MspInit+0xc4>)
 8000d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d96:	6593      	str	r3, [r2, #88]	; 0x58
 8000d98:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <HAL_UART_MspInit+0xc4>)
 8000d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <HAL_UART_MspInit+0xc4>)
 8000da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da8:	4a16      	ldr	r2, [pc, #88]	; (8000e04 <HAL_UART_MspInit+0xc4>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db0:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <HAL_UART_MspInit+0xc4>)
 8000db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dbc:	230c      	movs	r3, #12
 8000dbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dd4:	2307      	movs	r3, #7
 8000dd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dda:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dde:	4619      	mov	r1, r3
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de4:	f000 fadc 	bl	80013a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2100      	movs	r1, #0
 8000dec:	2026      	movs	r0, #38	; 0x26
 8000dee:	f000 fa22 	bl	8001236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000df2:	2026      	movs	r0, #38	; 0x26
 8000df4:	f000 fa3b 	bl	800126e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000df8:	bf00      	nop
 8000dfa:	37b0      	adds	r7, #176	; 0xb0
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40004400 	.word	0x40004400
 8000e04:	40021000 	.word	0x40021000

08000e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <NMI_Handler+0x4>

08000e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <HardFault_Handler+0x4>

08000e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <MemManage_Handler+0x4>

08000e1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e54:	f000 f8f4 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <TIM3_IRQHandler+0x1c>)
 8000e62:	f002 f879 	bl	8002f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  counter_50ms++;
 8000e66:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <TIM3_IRQHandler+0x20>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <TIM3_IRQHandler+0x20>)
 8000e70:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000090 	.word	0x20000090
 8000e7c:	20000160 	.word	0x20000160

08000e80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <USART2_IRQHandler+0x10>)
 8000e86:	f002 fe5b 	bl	8003b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200000dc 	.word	0x200000dc

08000e94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e98:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e9c:	f000 fc5c 	bl	8001758 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eac:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <_sbrk+0x5c>)
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <_sbrk+0x60>)
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d102      	bne.n	8000ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <_sbrk+0x64>)
 8000ec2:	4a12      	ldr	r2, [pc, #72]	; (8000f0c <_sbrk+0x68>)
 8000ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d207      	bcs.n	8000ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed4:	f004 f8a6 	bl	8005024 <__errno>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	220c      	movs	r2, #12
 8000edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	e009      	b.n	8000ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <_sbrk+0x64>)
 8000ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20018000 	.word	0x20018000
 8000f04:	00000400 	.word	0x00000400
 8000f08:	20000268 	.word	0x20000268
 8000f0c:	20000280 	.word	0x20000280

08000f10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <SystemInit+0x20>)
 8000f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1a:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <SystemInit+0x20>)
 8000f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f38:	f7ff ffea 	bl	8000f10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f3c:	480c      	ldr	r0, [pc, #48]	; (8000f70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f3e:	490d      	ldr	r1, [pc, #52]	; (8000f74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f40:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <LoopForever+0xe>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f44:	e002      	b.n	8000f4c <LoopCopyDataInit>

08000f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4a:	3304      	adds	r3, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f50:	d3f9      	bcc.n	8000f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f54:	4c0a      	ldr	r4, [pc, #40]	; (8000f80 <LoopForever+0x16>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f58:	e001      	b.n	8000f5e <LoopFillZerobss>

08000f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f5c:	3204      	adds	r2, #4

08000f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f60:	d3fb      	bcc.n	8000f5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f62:	f004 f865 	bl	8005030 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f66:	f7ff fcdd 	bl	8000924 <main>

08000f6a <LoopForever>:

LoopForever:
    b LoopForever
 8000f6a:	e7fe      	b.n	8000f6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f6c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f74:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f78:	08005aac 	.word	0x08005aac
  ldr r2, =_sbss
 8000f7c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f80:	20000280 	.word	0x20000280

08000f84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f84:	e7fe      	b.n	8000f84 <ADC1_2_IRQHandler>
	...

08000f88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_Init+0x3c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <HAL_Init+0x3c>)
 8000f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9e:	2003      	movs	r0, #3
 8000fa0:	f000 f93e 	bl	8001220 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f000 f80f 	bl	8000fc8 <HAL_InitTick>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	71fb      	strb	r3, [r7, #7]
 8000fb4:	e001      	b.n	8000fba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fb6:	f7ff fe79 	bl	8000cac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fba:	79fb      	ldrb	r3, [r7, #7]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40022000 	.word	0x40022000

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <HAL_InitTick+0x6c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d023      	beq.n	8001024 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <HAL_InitTick+0x70>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <HAL_InitTick+0x6c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f949 	bl	800128a <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10f      	bne.n	800101e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b0f      	cmp	r3, #15
 8001002:	d809      	bhi.n	8001018 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001004:	2200      	movs	r2, #0
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f000 f913 	bl	8001236 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001010:	4a0a      	ldr	r2, [pc, #40]	; (800103c <HAL_InitTick+0x74>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	e007      	b.n	8001028 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e004      	b.n	8001028 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	e001      	b.n	8001028 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001028:	7bfb      	ldrb	r3, [r7, #15]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000008 	.word	0x20000008
 8001038:	20000000 	.word	0x20000000
 800103c:	20000004 	.word	0x20000004

08001040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x20>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x24>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <HAL_IncTick+0x24>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000008 	.word	0x20000008
 8001064:	2000026c 	.word	0x2000026c

08001068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <HAL_GetTick+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	2000026c 	.word	0x2000026c

08001080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800109c:	4013      	ands	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	60d3      	str	r3, [r2, #12]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	f003 0307 	and.w	r3, r3, #7
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	db0b      	blt.n	800110e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	f003 021f 	and.w	r2, r3, #31
 80010fc:	4907      	ldr	r1, [pc, #28]	; (800111c <__NVIC_EnableIRQ+0x38>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	2001      	movs	r0, #1
 8001106:	fa00 f202 	lsl.w	r2, r0, r2
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000e100 	.word	0xe000e100

08001120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	; (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	; (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
         );
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ec:	d301      	bcc.n	80011f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00f      	b.n	8001212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <SysTick_Config+0x40>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fa:	210f      	movs	r1, #15
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f7ff ff8e 	bl	8001120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <SysTick_Config+0x40>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <SysTick_Config+0x40>)
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	e000e010 	.word	0xe000e010

08001220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff29 	bl	8001080 <__NVIC_SetPriorityGrouping>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001248:	f7ff ff3e 	bl	80010c8 <__NVIC_GetPriorityGrouping>
 800124c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	6978      	ldr	r0, [r7, #20]
 8001254:	f7ff ff8e 	bl	8001174 <NVIC_EncodePriority>
 8001258:	4602      	mov	r2, r0
 800125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff5d 	bl	8001120 <__NVIC_SetPriority>
}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff31 	bl	80010e4 <__NVIC_EnableIRQ>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ffa2 	bl	80011dc <SysTick_Config>
 8001298:	4603      	mov	r3, r0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b085      	sub	sp, #20
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d008      	beq.n	80012cc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2204      	movs	r2, #4
 80012be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e022      	b.n	8001312 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 020e 	bic.w	r2, r2, #14
 80012da:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0201 	bic.w	r2, r2, #1
 80012ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f0:	f003 021c 	and.w	r2, r3, #28
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	2101      	movs	r1, #1
 80012fa:	fa01 f202 	lsl.w	r2, r1, r2
 80012fe:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001310:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001312:	4618      	mov	r0, r3
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b084      	sub	sp, #16
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d005      	beq.n	8001342 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2204      	movs	r2, #4
 800133a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	73fb      	strb	r3, [r7, #15]
 8001340:	e029      	b.n	8001396 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 020e 	bic.w	r2, r2, #14
 8001350:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 0201 	bic.w	r2, r2, #1
 8001360:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f003 021c 	and.w	r2, r3, #28
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	2101      	movs	r1, #1
 8001370:	fa01 f202 	lsl.w	r2, r1, r2
 8001374:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2201      	movs	r2, #1
 800137a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	4798      	blx	r3
    }
  }
  return status;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b087      	sub	sp, #28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ae:	e17f      	b.n	80016b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2101      	movs	r1, #1
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	fa01 f303 	lsl.w	r3, r1, r3
 80013bc:	4013      	ands	r3, r2
 80013be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 8171 	beq.w	80016aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d005      	beq.n	80013e0 <HAL_GPIO_Init+0x40>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d130      	bne.n	8001442 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	2203      	movs	r2, #3
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	68da      	ldr	r2, [r3, #12]
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001416:	2201      	movs	r2, #1
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	091b      	lsrs	r3, r3, #4
 800142c:	f003 0201 	and.w	r2, r3, #1
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	2b03      	cmp	r3, #3
 800144c:	d118      	bne.n	8001480 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001452:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001454:	2201      	movs	r2, #1
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	08db      	lsrs	r3, r3, #3
 800146a:	f003 0201 	and.w	r2, r3, #1
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b03      	cmp	r3, #3
 800148a:	d017      	beq.n	80014bc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d123      	bne.n	8001510 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	08da      	lsrs	r2, r3, #3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3208      	adds	r2, #8
 80014d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	220f      	movs	r2, #15
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	691a      	ldr	r2, [r3, #16]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	08da      	lsrs	r2, r3, #3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3208      	adds	r2, #8
 800150a:	6939      	ldr	r1, [r7, #16]
 800150c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0203 	and.w	r2, r3, #3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80ac 	beq.w	80016aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	4b5f      	ldr	r3, [pc, #380]	; (80016d0 <HAL_GPIO_Init+0x330>)
 8001554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001556:	4a5e      	ldr	r2, [pc, #376]	; (80016d0 <HAL_GPIO_Init+0x330>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6613      	str	r3, [r2, #96]	; 0x60
 800155e:	4b5c      	ldr	r3, [pc, #368]	; (80016d0 <HAL_GPIO_Init+0x330>)
 8001560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800156a:	4a5a      	ldr	r2, [pc, #360]	; (80016d4 <HAL_GPIO_Init+0x334>)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	3302      	adds	r3, #2
 8001572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001576:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	220f      	movs	r2, #15
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001594:	d025      	beq.n	80015e2 <HAL_GPIO_Init+0x242>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4f      	ldr	r2, [pc, #316]	; (80016d8 <HAL_GPIO_Init+0x338>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d01f      	beq.n	80015de <HAL_GPIO_Init+0x23e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4e      	ldr	r2, [pc, #312]	; (80016dc <HAL_GPIO_Init+0x33c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d019      	beq.n	80015da <HAL_GPIO_Init+0x23a>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a4d      	ldr	r2, [pc, #308]	; (80016e0 <HAL_GPIO_Init+0x340>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d013      	beq.n	80015d6 <HAL_GPIO_Init+0x236>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a4c      	ldr	r2, [pc, #304]	; (80016e4 <HAL_GPIO_Init+0x344>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d00d      	beq.n	80015d2 <HAL_GPIO_Init+0x232>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a4b      	ldr	r2, [pc, #300]	; (80016e8 <HAL_GPIO_Init+0x348>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d007      	beq.n	80015ce <HAL_GPIO_Init+0x22e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a4a      	ldr	r2, [pc, #296]	; (80016ec <HAL_GPIO_Init+0x34c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <HAL_GPIO_Init+0x22a>
 80015c6:	2306      	movs	r3, #6
 80015c8:	e00c      	b.n	80015e4 <HAL_GPIO_Init+0x244>
 80015ca:	2307      	movs	r3, #7
 80015cc:	e00a      	b.n	80015e4 <HAL_GPIO_Init+0x244>
 80015ce:	2305      	movs	r3, #5
 80015d0:	e008      	b.n	80015e4 <HAL_GPIO_Init+0x244>
 80015d2:	2304      	movs	r3, #4
 80015d4:	e006      	b.n	80015e4 <HAL_GPIO_Init+0x244>
 80015d6:	2303      	movs	r3, #3
 80015d8:	e004      	b.n	80015e4 <HAL_GPIO_Init+0x244>
 80015da:	2302      	movs	r3, #2
 80015dc:	e002      	b.n	80015e4 <HAL_GPIO_Init+0x244>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <HAL_GPIO_Init+0x244>
 80015e2:	2300      	movs	r3, #0
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	f002 0203 	and.w	r2, r2, #3
 80015ea:	0092      	lsls	r2, r2, #2
 80015ec:	4093      	lsls	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015f4:	4937      	ldr	r1, [pc, #220]	; (80016d4 <HAL_GPIO_Init+0x334>)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	089b      	lsrs	r3, r3, #2
 80015fa:	3302      	adds	r3, #2
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001602:	4b3b      	ldr	r3, [pc, #236]	; (80016f0 <HAL_GPIO_Init+0x350>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	43db      	mvns	r3, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001626:	4a32      	ldr	r2, [pc, #200]	; (80016f0 <HAL_GPIO_Init+0x350>)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800162c:	4b30      	ldr	r3, [pc, #192]	; (80016f0 <HAL_GPIO_Init+0x350>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001650:	4a27      	ldr	r2, [pc, #156]	; (80016f0 <HAL_GPIO_Init+0x350>)
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001656:	4b26      	ldr	r3, [pc, #152]	; (80016f0 <HAL_GPIO_Init+0x350>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	43db      	mvns	r3, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800167a:	4a1d      	ldr	r2, [pc, #116]	; (80016f0 <HAL_GPIO_Init+0x350>)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <HAL_GPIO_Init+0x350>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	43db      	mvns	r3, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016a4:	4a12      	ldr	r2, [pc, #72]	; (80016f0 <HAL_GPIO_Init+0x350>)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	3301      	adds	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f47f ae78 	bne.w	80013b0 <HAL_GPIO_Init+0x10>
  }
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	371c      	adds	r7, #28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40010000 	.word	0x40010000
 80016d8:	48000400 	.word	0x48000400
 80016dc:	48000800 	.word	0x48000800
 80016e0:	48000c00 	.word	0x48000c00
 80016e4:	48001000 	.word	0x48001000
 80016e8:	48001400 	.word	0x48001400
 80016ec:	48001800 	.word	0x48001800
 80016f0:	40010400 	.word	0x40010400

080016f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]
 8001700:	4613      	mov	r3, r2
 8001702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001704:	787b      	ldrb	r3, [r7, #1]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800170a:	887a      	ldrh	r2, [r7, #2]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001710:	e002      	b.n	8001718 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001712:	887a      	ldrh	r2, [r7, #2]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001736:	887a      	ldrh	r2, [r7, #2]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4013      	ands	r3, r2
 800173c:	041a      	lsls	r2, r3, #16
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	43d9      	mvns	r1, r3
 8001742:	887b      	ldrh	r3, [r7, #2]
 8001744:	400b      	ands	r3, r1
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	619a      	str	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	4013      	ands	r3, r2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d006      	beq.n	800177c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800176e:	4a05      	ldr	r2, [pc, #20]	; (8001784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fa5a 	bl	8000c30 <HAL_GPIO_EXTI_Callback>
  }
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40010400 	.word	0x40010400

08001788 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40007000 	.word	0x40007000

080017a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017b2:	d130      	bne.n	8001816 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017b4:	4b23      	ldr	r3, [pc, #140]	; (8001844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017c0:	d038      	beq.n	8001834 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017ca:	4a1e      	ldr	r2, [pc, #120]	; (8001844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017d2:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2232      	movs	r2, #50	; 0x32
 80017d8:	fb02 f303 	mul.w	r3, r2, r3
 80017dc:	4a1b      	ldr	r2, [pc, #108]	; (800184c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017de:	fba2 2303 	umull	r2, r3, r2, r3
 80017e2:	0c9b      	lsrs	r3, r3, #18
 80017e4:	3301      	adds	r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017e8:	e002      	b.n	80017f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017f0:	4b14      	ldr	r3, [pc, #80]	; (8001844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fc:	d102      	bne.n	8001804 <HAL_PWREx_ControlVoltageScaling+0x60>
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1f2      	bne.n	80017ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800180c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001810:	d110      	bne.n	8001834 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e00f      	b.n	8001836 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001816:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800181e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001822:	d007      	beq.n	8001834 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001824:	4b07      	ldr	r3, [pc, #28]	; (8001844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800182c:	4a05      	ldr	r2, [pc, #20]	; (8001844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800182e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001832:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40007000 	.word	0x40007000
 8001848:	20000000 	.word	0x20000000
 800184c:	431bde83 	.word	0x431bde83

08001850 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e3ca      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001862:	4b97      	ldr	r3, [pc, #604]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800186c:	4b94      	ldr	r3, [pc, #592]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 80e4 	beq.w	8001a4c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d007      	beq.n	800189a <HAL_RCC_OscConfig+0x4a>
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	2b0c      	cmp	r3, #12
 800188e:	f040 808b 	bne.w	80019a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	2b01      	cmp	r3, #1
 8001896:	f040 8087 	bne.w	80019a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800189a:	4b89      	ldr	r3, [pc, #548]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d005      	beq.n	80018b2 <HAL_RCC_OscConfig+0x62>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e3a2      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a1a      	ldr	r2, [r3, #32]
 80018b6:	4b82      	ldr	r3, [pc, #520]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d004      	beq.n	80018cc <HAL_RCC_OscConfig+0x7c>
 80018c2:	4b7f      	ldr	r3, [pc, #508]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018ca:	e005      	b.n	80018d8 <HAL_RCC_OscConfig+0x88>
 80018cc:	4b7c      	ldr	r3, [pc, #496]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 80018ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d2:	091b      	lsrs	r3, r3, #4
 80018d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018d8:	4293      	cmp	r3, r2
 80018da:	d223      	bcs.n	8001924 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f000 fd55 	bl	8002390 <RCC_SetFlashLatencyFromMSIRange>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e383      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018f0:	4b73      	ldr	r3, [pc, #460]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a72      	ldr	r2, [pc, #456]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 80018f6:	f043 0308 	orr.w	r3, r3, #8
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	4b70      	ldr	r3, [pc, #448]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	496d      	ldr	r1, [pc, #436]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 800190a:	4313      	orrs	r3, r2
 800190c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800190e:	4b6c      	ldr	r3, [pc, #432]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	4968      	ldr	r1, [pc, #416]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 800191e:	4313      	orrs	r3, r2
 8001920:	604b      	str	r3, [r1, #4]
 8001922:	e025      	b.n	8001970 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001924:	4b66      	ldr	r3, [pc, #408]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a65      	ldr	r2, [pc, #404]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 800192a:	f043 0308 	orr.w	r3, r3, #8
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	4b63      	ldr	r3, [pc, #396]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	4960      	ldr	r1, [pc, #384]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 800193e:	4313      	orrs	r3, r2
 8001940:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001942:	4b5f      	ldr	r3, [pc, #380]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	021b      	lsls	r3, r3, #8
 8001950:	495b      	ldr	r1, [pc, #364]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 8001952:	4313      	orrs	r3, r2
 8001954:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d109      	bne.n	8001970 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	4618      	mov	r0, r3
 8001962:	f000 fd15 	bl	8002390 <RCC_SetFlashLatencyFromMSIRange>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e343      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001970:	f000 fc4a 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 8001974:	4602      	mov	r2, r0
 8001976:	4b52      	ldr	r3, [pc, #328]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	091b      	lsrs	r3, r3, #4
 800197c:	f003 030f 	and.w	r3, r3, #15
 8001980:	4950      	ldr	r1, [pc, #320]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001982:	5ccb      	ldrb	r3, [r1, r3]
 8001984:	f003 031f 	and.w	r3, r3, #31
 8001988:	fa22 f303 	lsr.w	r3, r2, r3
 800198c:	4a4e      	ldr	r2, [pc, #312]	; (8001ac8 <HAL_RCC_OscConfig+0x278>)
 800198e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001990:	4b4e      	ldr	r3, [pc, #312]	; (8001acc <HAL_RCC_OscConfig+0x27c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fb17 	bl	8000fc8 <HAL_InitTick>
 800199a:	4603      	mov	r3, r0
 800199c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d052      	beq.n	8001a4a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	e327      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d032      	beq.n	8001a16 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019b0:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a42      	ldr	r2, [pc, #264]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019bc:	f7ff fb54 	bl	8001068 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019c4:	f7ff fb50 	bl	8001068 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e310      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019d6:	4b3a      	ldr	r3, [pc, #232]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019e2:	4b37      	ldr	r3, [pc, #220]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a36      	ldr	r2, [pc, #216]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 80019e8:	f043 0308 	orr.w	r3, r3, #8
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	4b34      	ldr	r3, [pc, #208]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4931      	ldr	r1, [pc, #196]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a00:	4b2f      	ldr	r3, [pc, #188]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	492c      	ldr	r1, [pc, #176]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
 8001a14:	e01a      	b.n	8001a4c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a16:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a29      	ldr	r2, [pc, #164]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a22:	f7ff fb21 	bl	8001068 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a2a:	f7ff fb1d 	bl	8001068 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e2dd      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a3c:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f0      	bne.n	8001a2a <HAL_RCC_OscConfig+0x1da>
 8001a48:	e000      	b.n	8001a4c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a4a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d074      	beq.n	8001b42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d005      	beq.n	8001a6a <HAL_RCC_OscConfig+0x21a>
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2b0c      	cmp	r3, #12
 8001a62:	d10e      	bne.n	8001a82 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d10b      	bne.n	8001a82 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d064      	beq.n	8001b40 <HAL_RCC_OscConfig+0x2f0>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d160      	bne.n	8001b40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e2ba      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8a:	d106      	bne.n	8001a9a <HAL_RCC_OscConfig+0x24a>
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a0b      	ldr	r2, [pc, #44]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 8001a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	e026      	b.n	8001ae8 <HAL_RCC_OscConfig+0x298>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa2:	d115      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x280>
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a02      	ldr	r2, [pc, #8]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 8001ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	e014      	b.n	8001ae8 <HAL_RCC_OscConfig+0x298>
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	08005a20 	.word	0x08005a20
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	20000004 	.word	0x20000004
 8001ad0:	4ba0      	ldr	r3, [pc, #640]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a9f      	ldr	r2, [pc, #636]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	4b9d      	ldr	r3, [pc, #628]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a9c      	ldr	r2, [pc, #624]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d013      	beq.n	8001b18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af0:	f7ff faba 	bl	8001068 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af8:	f7ff fab6 	bl	8001068 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b64      	cmp	r3, #100	; 0x64
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e276      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b0a:	4b92      	ldr	r3, [pc, #584]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0x2a8>
 8001b16:	e014      	b.n	8001b42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7ff faa6 	bl	8001068 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b20:	f7ff faa2 	bl	8001068 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b64      	cmp	r3, #100	; 0x64
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e262      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b32:	4b88      	ldr	r3, [pc, #544]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x2d0>
 8001b3e:	e000      	b.n	8001b42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d060      	beq.n	8001c10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_OscConfig+0x310>
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	2b0c      	cmp	r3, #12
 8001b58:	d119      	bne.n	8001b8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d116      	bne.n	8001b8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b60:	4b7c      	ldr	r3, [pc, #496]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d005      	beq.n	8001b78 <HAL_RCC_OscConfig+0x328>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e23f      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b78:	4b76      	ldr	r3, [pc, #472]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	061b      	lsls	r3, r3, #24
 8001b86:	4973      	ldr	r1, [pc, #460]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b8c:	e040      	b.n	8001c10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d023      	beq.n	8001bde <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b96:	4b6f      	ldr	r3, [pc, #444]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a6e      	ldr	r2, [pc, #440]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba2:	f7ff fa61 	bl	8001068 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001baa:	f7ff fa5d 	bl	8001068 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e21d      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bbc:	4b65      	ldr	r3, [pc, #404]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc8:	4b62      	ldr	r3, [pc, #392]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	061b      	lsls	r3, r3, #24
 8001bd6:	495f      	ldr	r1, [pc, #380]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	604b      	str	r3, [r1, #4]
 8001bdc:	e018      	b.n	8001c10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bde:	4b5d      	ldr	r3, [pc, #372]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a5c      	ldr	r2, [pc, #368]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bea:	f7ff fa3d 	bl	8001068 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf2:	f7ff fa39 	bl	8001068 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e1f9      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c04:	4b53      	ldr	r3, [pc, #332]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f0      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d03c      	beq.n	8001c96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d01c      	beq.n	8001c5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c24:	4b4b      	ldr	r3, [pc, #300]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c2a:	4a4a      	ldr	r2, [pc, #296]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c34:	f7ff fa18 	bl	8001068 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3c:	f7ff fa14 	bl	8001068 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e1d4      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c4e:	4b41      	ldr	r3, [pc, #260]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0ef      	beq.n	8001c3c <HAL_RCC_OscConfig+0x3ec>
 8001c5c:	e01b      	b.n	8001c96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c5e:	4b3d      	ldr	r3, [pc, #244]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c64:	4a3b      	ldr	r2, [pc, #236]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001c66:	f023 0301 	bic.w	r3, r3, #1
 8001c6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6e:	f7ff f9fb 	bl	8001068 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c76:	f7ff f9f7 	bl	8001068 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e1b7      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c88:	4b32      	ldr	r3, [pc, #200]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1ef      	bne.n	8001c76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 80a6 	beq.w	8001df0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ca8:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10d      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb8:	4a26      	ldr	r2, [pc, #152]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	6593      	str	r3, [r2, #88]	; 0x58
 8001cc0:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd0:	4b21      	ldr	r3, [pc, #132]	; (8001d58 <HAL_RCC_OscConfig+0x508>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d118      	bne.n	8001d0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cdc:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <HAL_RCC_OscConfig+0x508>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a1d      	ldr	r2, [pc, #116]	; (8001d58 <HAL_RCC_OscConfig+0x508>)
 8001ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce8:	f7ff f9be 	bl	8001068 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf0:	f7ff f9ba 	bl	8001068 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e17a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <HAL_RCC_OscConfig+0x508>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d108      	bne.n	8001d28 <HAL_RCC_OscConfig+0x4d8>
 8001d16:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1c:	4a0d      	ldr	r2, [pc, #52]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d26:	e029      	b.n	8001d7c <HAL_RCC_OscConfig+0x52c>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2b05      	cmp	r3, #5
 8001d2e:	d115      	bne.n	8001d5c <HAL_RCC_OscConfig+0x50c>
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d36:	4a07      	ldr	r2, [pc, #28]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001d38:	f043 0304 	orr.w	r3, r3, #4
 8001d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d46:	4a03      	ldr	r2, [pc, #12]	; (8001d54 <HAL_RCC_OscConfig+0x504>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d50:	e014      	b.n	8001d7c <HAL_RCC_OscConfig+0x52c>
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40007000 	.word	0x40007000
 8001d5c:	4b9c      	ldr	r3, [pc, #624]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d62:	4a9b      	ldr	r2, [pc, #620]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001d64:	f023 0301 	bic.w	r3, r3, #1
 8001d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d6c:	4b98      	ldr	r3, [pc, #608]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d72:	4a97      	ldr	r2, [pc, #604]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001d74:	f023 0304 	bic.w	r3, r3, #4
 8001d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d016      	beq.n	8001db2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d84:	f7ff f970 	bl	8001068 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d8a:	e00a      	b.n	8001da2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8c:	f7ff f96c 	bl	8001068 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e12a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001da2:	4b8b      	ldr	r3, [pc, #556]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0ed      	beq.n	8001d8c <HAL_RCC_OscConfig+0x53c>
 8001db0:	e015      	b.n	8001dde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db2:	f7ff f959 	bl	8001068 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001db8:	e00a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dba:	f7ff f955 	bl	8001068 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e113      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dd0:	4b7f      	ldr	r3, [pc, #508]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1ed      	bne.n	8001dba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dde:	7ffb      	ldrb	r3, [r7, #31]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d105      	bne.n	8001df0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de4:	4b7a      	ldr	r3, [pc, #488]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de8:	4a79      	ldr	r2, [pc, #484]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001dea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80fe 	beq.w	8001ff6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	f040 80d0 	bne.w	8001fa4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e04:	4b72      	ldr	r3, [pc, #456]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f003 0203 	and.w	r2, r3, #3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d130      	bne.n	8001e7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	3b01      	subs	r3, #1
 8001e24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d127      	bne.n	8001e7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d11f      	bne.n	8001e7a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e44:	2a07      	cmp	r2, #7
 8001e46:	bf14      	ite	ne
 8001e48:	2201      	movne	r2, #1
 8001e4a:	2200      	moveq	r2, #0
 8001e4c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d113      	bne.n	8001e7a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5c:	085b      	lsrs	r3, r3, #1
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d109      	bne.n	8001e7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	085b      	lsrs	r3, r3, #1
 8001e72:	3b01      	subs	r3, #1
 8001e74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d06e      	beq.n	8001f58 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	2b0c      	cmp	r3, #12
 8001e7e:	d069      	beq.n	8001f54 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e80:	4b53      	ldr	r3, [pc, #332]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d105      	bne.n	8001e98 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e8c:	4b50      	ldr	r3, [pc, #320]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0ad      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e9c:	4b4c      	ldr	r3, [pc, #304]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a4b      	ldr	r2, [pc, #300]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001ea2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ea6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ea8:	f7ff f8de 	bl	8001068 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb0:	f7ff f8da 	bl	8001068 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e09a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec2:	4b43      	ldr	r3, [pc, #268]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ece:	4b40      	ldr	r3, [pc, #256]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	4b40      	ldr	r3, [pc, #256]	; (8001fd4 <HAL_RCC_OscConfig+0x784>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ede:	3a01      	subs	r2, #1
 8001ee0:	0112      	lsls	r2, r2, #4
 8001ee2:	4311      	orrs	r1, r2
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ee8:	0212      	lsls	r2, r2, #8
 8001eea:	4311      	orrs	r1, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ef0:	0852      	lsrs	r2, r2, #1
 8001ef2:	3a01      	subs	r2, #1
 8001ef4:	0552      	lsls	r2, r2, #21
 8001ef6:	4311      	orrs	r1, r2
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001efc:	0852      	lsrs	r2, r2, #1
 8001efe:	3a01      	subs	r2, #1
 8001f00:	0652      	lsls	r2, r2, #25
 8001f02:	4311      	orrs	r1, r2
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f08:	0912      	lsrs	r2, r2, #4
 8001f0a:	0452      	lsls	r2, r2, #17
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	4930      	ldr	r1, [pc, #192]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f14:	4b2e      	ldr	r3, [pc, #184]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a2d      	ldr	r2, [pc, #180]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f20:	4b2b      	ldr	r3, [pc, #172]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	4a2a      	ldr	r2, [pc, #168]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f2c:	f7ff f89c 	bl	8001068 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f34:	f7ff f898 	bl	8001068 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e058      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f46:	4b22      	ldr	r3, [pc, #136]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f52:	e050      	b.n	8001ff6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e04f      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f58:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d148      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f64:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a19      	ldr	r2, [pc, #100]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f70:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	4a16      	ldr	r2, [pc, #88]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001f76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f7c:	f7ff f874 	bl	8001068 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f84:	f7ff f870 	bl	8001068 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e030      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f96:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0x734>
 8001fa2:	e028      	b.n	8001ff6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	2b0c      	cmp	r3, #12
 8001fa8:	d023      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a08      	ldr	r2, [pc, #32]	; (8001fd0 <HAL_RCC_OscConfig+0x780>)
 8001fb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb6:	f7ff f857 	bl	8001068 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fbc:	e00c      	b.n	8001fd8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbe:	f7ff f853 	bl	8001068 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d905      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e013      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7a8>
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <HAL_RCC_OscConfig+0x7b0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1ec      	bne.n	8001fbe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_RCC_OscConfig+0x7b0>)
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	4905      	ldr	r1, [pc, #20]	; (8002000 <HAL_RCC_OscConfig+0x7b0>)
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_RCC_OscConfig+0x7b4>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	60cb      	str	r3, [r1, #12]
 8001ff0:	e001      	b.n	8001ff6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3720      	adds	r7, #32
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000
 8002004:	feeefffc 	.word	0xfeeefffc

08002008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0e7      	b.n	80021ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800201c:	4b75      	ldr	r3, [pc, #468]	; (80021f4 <HAL_RCC_ClockConfig+0x1ec>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d910      	bls.n	800204c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202a:	4b72      	ldr	r3, [pc, #456]	; (80021f4 <HAL_RCC_ClockConfig+0x1ec>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 0207 	bic.w	r2, r3, #7
 8002032:	4970      	ldr	r1, [pc, #448]	; (80021f4 <HAL_RCC_ClockConfig+0x1ec>)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800203a:	4b6e      	ldr	r3, [pc, #440]	; (80021f4 <HAL_RCC_ClockConfig+0x1ec>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d001      	beq.n	800204c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0cf      	b.n	80021ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d010      	beq.n	800207a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	4b66      	ldr	r3, [pc, #408]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002064:	429a      	cmp	r2, r3
 8002066:	d908      	bls.n	800207a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002068:	4b63      	ldr	r3, [pc, #396]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	4960      	ldr	r1, [pc, #384]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d04c      	beq.n	8002120 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b03      	cmp	r3, #3
 800208c:	d107      	bne.n	800209e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208e:	4b5a      	ldr	r3, [pc, #360]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d121      	bne.n	80020de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e0a6      	b.n	80021ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d107      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020a6:	4b54      	ldr	r3, [pc, #336]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d115      	bne.n	80020de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e09a      	b.n	80021ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d107      	bne.n	80020ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020be:	4b4e      	ldr	r3, [pc, #312]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d109      	bne.n	80020de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e08e      	b.n	80021ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ce:	4b4a      	ldr	r3, [pc, #296]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e086      	b.n	80021ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020de:	4b46      	ldr	r3, [pc, #280]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f023 0203 	bic.w	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	4943      	ldr	r1, [pc, #268]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020f0:	f7fe ffba 	bl	8001068 <HAL_GetTick>
 80020f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f6:	e00a      	b.n	800210e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f8:	f7fe ffb6 	bl	8001068 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f241 3288 	movw	r2, #5000	; 0x1388
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e06e      	b.n	80021ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210e:	4b3a      	ldr	r3, [pc, #232]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 020c 	and.w	r2, r3, #12
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	429a      	cmp	r2, r3
 800211e:	d1eb      	bne.n	80020f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d010      	beq.n	800214e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	4b31      	ldr	r3, [pc, #196]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002138:	429a      	cmp	r2, r3
 800213a:	d208      	bcs.n	800214e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800213c:	4b2e      	ldr	r3, [pc, #184]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	492b      	ldr	r1, [pc, #172]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 800214a:	4313      	orrs	r3, r2
 800214c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800214e:	4b29      	ldr	r3, [pc, #164]	; (80021f4 <HAL_RCC_ClockConfig+0x1ec>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	429a      	cmp	r2, r3
 800215a:	d210      	bcs.n	800217e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215c:	4b25      	ldr	r3, [pc, #148]	; (80021f4 <HAL_RCC_ClockConfig+0x1ec>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f023 0207 	bic.w	r2, r3, #7
 8002164:	4923      	ldr	r1, [pc, #140]	; (80021f4 <HAL_RCC_ClockConfig+0x1ec>)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	4313      	orrs	r3, r2
 800216a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216c:	4b21      	ldr	r3, [pc, #132]	; (80021f4 <HAL_RCC_ClockConfig+0x1ec>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d001      	beq.n	800217e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e036      	b.n	80021ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b00      	cmp	r3, #0
 8002188:	d008      	beq.n	800219c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800218a:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	4918      	ldr	r1, [pc, #96]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002198:	4313      	orrs	r3, r2
 800219a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d009      	beq.n	80021bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021a8:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4910      	ldr	r1, [pc, #64]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021bc:	f000 f824 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 80021c0:	4602      	mov	r2, r0
 80021c2:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	091b      	lsrs	r3, r3, #4
 80021c8:	f003 030f 	and.w	r3, r3, #15
 80021cc:	490b      	ldr	r1, [pc, #44]	; (80021fc <HAL_RCC_ClockConfig+0x1f4>)
 80021ce:	5ccb      	ldrb	r3, [r1, r3]
 80021d0:	f003 031f 	and.w	r3, r3, #31
 80021d4:	fa22 f303 	lsr.w	r3, r2, r3
 80021d8:	4a09      	ldr	r2, [pc, #36]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 80021da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021dc:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_RCC_ClockConfig+0x1fc>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe fef1 	bl	8000fc8 <HAL_InitTick>
 80021e6:	4603      	mov	r3, r0
 80021e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80021ea:	7afb      	ldrb	r3, [r7, #11]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40022000 	.word	0x40022000
 80021f8:	40021000 	.word	0x40021000
 80021fc:	08005a20 	.word	0x08005a20
 8002200:	20000000 	.word	0x20000000
 8002204:	20000004 	.word	0x20000004

08002208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	; 0x24
 800220c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	2300      	movs	r3, #0
 8002214:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002216:	4b3e      	ldr	r3, [pc, #248]	; (8002310 <HAL_RCC_GetSysClockFreq+0x108>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002220:	4b3b      	ldr	r3, [pc, #236]	; (8002310 <HAL_RCC_GetSysClockFreq+0x108>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_RCC_GetSysClockFreq+0x34>
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	2b0c      	cmp	r3, #12
 8002234:	d121      	bne.n	800227a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d11e      	bne.n	800227a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800223c:	4b34      	ldr	r3, [pc, #208]	; (8002310 <HAL_RCC_GetSysClockFreq+0x108>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	2b00      	cmp	r3, #0
 8002246:	d107      	bne.n	8002258 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002248:	4b31      	ldr	r3, [pc, #196]	; (8002310 <HAL_RCC_GetSysClockFreq+0x108>)
 800224a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800224e:	0a1b      	lsrs	r3, r3, #8
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	61fb      	str	r3, [r7, #28]
 8002256:	e005      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002258:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <HAL_RCC_GetSysClockFreq+0x108>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002264:	4a2b      	ldr	r2, [pc, #172]	; (8002314 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10d      	bne.n	8002290 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002278:	e00a      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	2b04      	cmp	r3, #4
 800227e:	d102      	bne.n	8002286 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002280:	4b25      	ldr	r3, [pc, #148]	; (8002318 <HAL_RCC_GetSysClockFreq+0x110>)
 8002282:	61bb      	str	r3, [r7, #24]
 8002284:	e004      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	2b08      	cmp	r3, #8
 800228a:	d101      	bne.n	8002290 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800228c:	4b23      	ldr	r3, [pc, #140]	; (800231c <HAL_RCC_GetSysClockFreq+0x114>)
 800228e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	2b0c      	cmp	r3, #12
 8002294:	d134      	bne.n	8002300 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002296:	4b1e      	ldr	r3, [pc, #120]	; (8002310 <HAL_RCC_GetSysClockFreq+0x108>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d003      	beq.n	80022ae <HAL_RCC_GetSysClockFreq+0xa6>
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d003      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0xac>
 80022ac:	e005      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022ae:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <HAL_RCC_GetSysClockFreq+0x110>)
 80022b0:	617b      	str	r3, [r7, #20]
      break;
 80022b2:	e005      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022b4:	4b19      	ldr	r3, [pc, #100]	; (800231c <HAL_RCC_GetSysClockFreq+0x114>)
 80022b6:	617b      	str	r3, [r7, #20]
      break;
 80022b8:	e002      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	617b      	str	r3, [r7, #20]
      break;
 80022be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022c0:	4b13      	ldr	r3, [pc, #76]	; (8002310 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	3301      	adds	r3, #1
 80022cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022ce:	4b10      	ldr	r3, [pc, #64]	; (8002310 <HAL_RCC_GetSysClockFreq+0x108>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	0a1b      	lsrs	r3, r3, #8
 80022d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	fb03 f202 	mul.w	r2, r3, r2
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022e6:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <HAL_RCC_GetSysClockFreq+0x108>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	0e5b      	lsrs	r3, r3, #25
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	3301      	adds	r3, #1
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002300:	69bb      	ldr	r3, [r7, #24]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3724      	adds	r7, #36	; 0x24
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000
 8002314:	08005a38 	.word	0x08005a38
 8002318:	00f42400 	.word	0x00f42400
 800231c:	007a1200 	.word	0x007a1200

08002320 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002324:	4b03      	ldr	r3, [pc, #12]	; (8002334 <HAL_RCC_GetHCLKFreq+0x14>)
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	20000000 	.word	0x20000000

08002338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800233c:	f7ff fff0 	bl	8002320 <HAL_RCC_GetHCLKFreq>
 8002340:	4602      	mov	r2, r0
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	4904      	ldr	r1, [pc, #16]	; (8002360 <HAL_RCC_GetPCLK1Freq+0x28>)
 800234e:	5ccb      	ldrb	r3, [r1, r3]
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002358:	4618      	mov	r0, r3
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40021000 	.word	0x40021000
 8002360:	08005a30 	.word	0x08005a30

08002364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002368:	f7ff ffda 	bl	8002320 <HAL_RCC_GetHCLKFreq>
 800236c:	4602      	mov	r2, r0
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	0adb      	lsrs	r3, r3, #11
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	4904      	ldr	r1, [pc, #16]	; (800238c <HAL_RCC_GetPCLK2Freq+0x28>)
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002384:	4618      	mov	r0, r3
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40021000 	.word	0x40021000
 800238c:	08005a30 	.word	0x08005a30

08002390 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002398:	2300      	movs	r3, #0
 800239a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800239c:	4b2a      	ldr	r3, [pc, #168]	; (8002448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800239e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023a8:	f7ff f9ee 	bl	8001788 <HAL_PWREx_GetVoltageRange>
 80023ac:	6178      	str	r0, [r7, #20]
 80023ae:	e014      	b.n	80023da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023b0:	4b25      	ldr	r3, [pc, #148]	; (8002448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b4:	4a24      	ldr	r2, [pc, #144]	; (8002448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ba:	6593      	str	r3, [r2, #88]	; 0x58
 80023bc:	4b22      	ldr	r3, [pc, #136]	; (8002448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023c8:	f7ff f9de 	bl	8001788 <HAL_PWREx_GetVoltageRange>
 80023cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023ce:	4b1e      	ldr	r3, [pc, #120]	; (8002448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d2:	4a1d      	ldr	r2, [pc, #116]	; (8002448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023e0:	d10b      	bne.n	80023fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b80      	cmp	r3, #128	; 0x80
 80023e6:	d919      	bls.n	800241c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2ba0      	cmp	r3, #160	; 0xa0
 80023ec:	d902      	bls.n	80023f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023ee:	2302      	movs	r3, #2
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	e013      	b.n	800241c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023f4:	2301      	movs	r3, #1
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	e010      	b.n	800241c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b80      	cmp	r3, #128	; 0x80
 80023fe:	d902      	bls.n	8002406 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002400:	2303      	movs	r3, #3
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	e00a      	b.n	800241c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b80      	cmp	r3, #128	; 0x80
 800240a:	d102      	bne.n	8002412 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800240c:	2302      	movs	r3, #2
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	e004      	b.n	800241c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b70      	cmp	r3, #112	; 0x70
 8002416:	d101      	bne.n	800241c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002418:	2301      	movs	r3, #1
 800241a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f023 0207 	bic.w	r2, r3, #7
 8002424:	4909      	ldr	r1, [pc, #36]	; (800244c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800242c:	4b07      	ldr	r3, [pc, #28]	; (800244c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	429a      	cmp	r2, r3
 8002438:	d001      	beq.n	800243e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40021000 	.word	0x40021000
 800244c:	40022000 	.word	0x40022000

08002450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002458:	2300      	movs	r3, #0
 800245a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800245c:	2300      	movs	r3, #0
 800245e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002468:	2b00      	cmp	r3, #0
 800246a:	d041      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002470:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002474:	d02a      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002476:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800247a:	d824      	bhi.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800247c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002480:	d008      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002482:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002486:	d81e      	bhi.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00a      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800248c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002490:	d010      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002492:	e018      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002494:	4b86      	ldr	r3, [pc, #536]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	4a85      	ldr	r2, [pc, #532]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800249e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024a0:	e015      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3304      	adds	r3, #4
 80024a6:	2100      	movs	r1, #0
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 fabb 	bl	8002a24 <RCCEx_PLLSAI1_Config>
 80024ae:	4603      	mov	r3, r0
 80024b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024b2:	e00c      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3320      	adds	r3, #32
 80024b8:	2100      	movs	r1, #0
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 fba6 	bl	8002c0c <RCCEx_PLLSAI2_Config>
 80024c0:	4603      	mov	r3, r0
 80024c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024c4:	e003      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	74fb      	strb	r3, [r7, #19]
      break;
 80024ca:	e000      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80024cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024ce:	7cfb      	ldrb	r3, [r7, #19]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10b      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024d4:	4b76      	ldr	r3, [pc, #472]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024e2:	4973      	ldr	r1, [pc, #460]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024ea:	e001      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d041      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002500:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002504:	d02a      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002506:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800250a:	d824      	bhi.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800250c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002510:	d008      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002512:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002516:	d81e      	bhi.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00a      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800251c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002520:	d010      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002522:	e018      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002524:	4b62      	ldr	r3, [pc, #392]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4a61      	ldr	r2, [pc, #388]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002530:	e015      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3304      	adds	r3, #4
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f000 fa73 	bl	8002a24 <RCCEx_PLLSAI1_Config>
 800253e:	4603      	mov	r3, r0
 8002540:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002542:	e00c      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3320      	adds	r3, #32
 8002548:	2100      	movs	r1, #0
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fb5e 	bl	8002c0c <RCCEx_PLLSAI2_Config>
 8002550:	4603      	mov	r3, r0
 8002552:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002554:	e003      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	74fb      	strb	r3, [r7, #19]
      break;
 800255a:	e000      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800255c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800255e:	7cfb      	ldrb	r3, [r7, #19]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10b      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002564:	4b52      	ldr	r3, [pc, #328]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002572:	494f      	ldr	r1, [pc, #316]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800257a:	e001      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800257c:	7cfb      	ldrb	r3, [r7, #19]
 800257e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80a0 	beq.w	80026ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800258e:	2300      	movs	r3, #0
 8002590:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002592:	4b47      	ldr	r3, [pc, #284]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80025a2:	2300      	movs	r3, #0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00d      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a8:	4b41      	ldr	r3, [pc, #260]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ac:	4a40      	ldr	r2, [pc, #256]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b2:	6593      	str	r3, [r2, #88]	; 0x58
 80025b4:	4b3e      	ldr	r3, [pc, #248]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c0:	2301      	movs	r3, #1
 80025c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025c4:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a3a      	ldr	r2, [pc, #232]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025d0:	f7fe fd4a 	bl	8001068 <HAL_GetTick>
 80025d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025d6:	e009      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d8:	f7fe fd46 	bl	8001068 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d902      	bls.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	74fb      	strb	r3, [r7, #19]
        break;
 80025ea:	e005      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025ec:	4b31      	ldr	r3, [pc, #196]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0ef      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d15c      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025fe:	4b2c      	ldr	r3, [pc, #176]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002604:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002608:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d01f      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	429a      	cmp	r2, r3
 800261a:	d019      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800261c:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002626:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002628:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262e:	4a20      	ldr	r2, [pc, #128]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002638:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263e:	4a1c      	ldr	r2, [pc, #112]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002648:	4a19      	ldr	r2, [pc, #100]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d016      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265a:	f7fe fd05 	bl	8001068 <HAL_GetTick>
 800265e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002660:	e00b      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002662:	f7fe fd01 	bl	8001068 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002670:	4293      	cmp	r3, r2
 8002672:	d902      	bls.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	74fb      	strb	r3, [r7, #19]
            break;
 8002678:	e006      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800267a:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0ec      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10c      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800268e:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002694:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800269e:	4904      	ldr	r1, [pc, #16]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80026a6:	e009      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026a8:	7cfb      	ldrb	r3, [r7, #19]
 80026aa:	74bb      	strb	r3, [r7, #18]
 80026ac:	e006      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026b8:	7cfb      	ldrb	r3, [r7, #19]
 80026ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026bc:	7c7b      	ldrb	r3, [r7, #17]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d105      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c2:	4b9e      	ldr	r3, [pc, #632]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c6:	4a9d      	ldr	r2, [pc, #628]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026da:	4b98      	ldr	r3, [pc, #608]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e0:	f023 0203 	bic.w	r2, r3, #3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e8:	4994      	ldr	r1, [pc, #592]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026fc:	4b8f      	ldr	r3, [pc, #572]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002702:	f023 020c 	bic.w	r2, r3, #12
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270a:	498c      	ldr	r1, [pc, #560]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800271e:	4b87      	ldr	r3, [pc, #540]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002724:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	4983      	ldr	r1, [pc, #524]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00a      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002740:	4b7e      	ldr	r3, [pc, #504]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002746:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	497b      	ldr	r1, [pc, #492]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002762:	4b76      	ldr	r3, [pc, #472]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002768:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002770:	4972      	ldr	r1, [pc, #456]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00a      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002784:	4b6d      	ldr	r3, [pc, #436]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	496a      	ldr	r1, [pc, #424]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027a6:	4b65      	ldr	r3, [pc, #404]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b4:	4961      	ldr	r1, [pc, #388]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00a      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027c8:	4b5c      	ldr	r3, [pc, #368]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d6:	4959      	ldr	r1, [pc, #356]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027ea:	4b54      	ldr	r3, [pc, #336]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f8:	4950      	ldr	r1, [pc, #320]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800280c:	4b4b      	ldr	r3, [pc, #300]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002812:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281a:	4948      	ldr	r1, [pc, #288]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800282e:	4b43      	ldr	r3, [pc, #268]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002834:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283c:	493f      	ldr	r1, [pc, #252]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d028      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002850:	4b3a      	ldr	r3, [pc, #232]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002856:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800285e:	4937      	ldr	r1, [pc, #220]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800286a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800286e:	d106      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002870:	4b32      	ldr	r3, [pc, #200]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4a31      	ldr	r2, [pc, #196]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800287a:	60d3      	str	r3, [r2, #12]
 800287c:	e011      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002882:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002886:	d10c      	bne.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3304      	adds	r3, #4
 800288c:	2101      	movs	r1, #1
 800288e:	4618      	mov	r0, r3
 8002890:	f000 f8c8 	bl	8002a24 <RCCEx_PLLSAI1_Config>
 8002894:	4603      	mov	r3, r0
 8002896:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002898:	7cfb      	ldrb	r3, [r7, #19]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800289e:	7cfb      	ldrb	r3, [r7, #19]
 80028a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d028      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028ae:	4b23      	ldr	r3, [pc, #140]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028bc:	491f      	ldr	r1, [pc, #124]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028cc:	d106      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028ce:	4b1b      	ldr	r3, [pc, #108]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	4a1a      	ldr	r2, [pc, #104]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028d8:	60d3      	str	r3, [r2, #12]
 80028da:	e011      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028e4:	d10c      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3304      	adds	r3, #4
 80028ea:	2101      	movs	r1, #1
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 f899 	bl	8002a24 <RCCEx_PLLSAI1_Config>
 80028f2:	4603      	mov	r3, r0
 80028f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028f6:	7cfb      	ldrb	r3, [r7, #19]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80028fc:	7cfb      	ldrb	r3, [r7, #19]
 80028fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d02b      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800291a:	4908      	ldr	r1, [pc, #32]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002926:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800292a:	d109      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800292c:	4b03      	ldr	r3, [pc, #12]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4a02      	ldr	r2, [pc, #8]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002932:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002936:	60d3      	str	r3, [r2, #12]
 8002938:	e014      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800293a:	bf00      	nop
 800293c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002944:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002948:	d10c      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3304      	adds	r3, #4
 800294e:	2101      	movs	r1, #1
 8002950:	4618      	mov	r0, r3
 8002952:	f000 f867 	bl	8002a24 <RCCEx_PLLSAI1_Config>
 8002956:	4603      	mov	r3, r0
 8002958:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800295a:	7cfb      	ldrb	r3, [r7, #19]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002960:	7cfb      	ldrb	r3, [r7, #19]
 8002962:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d02f      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002970:	4b2b      	ldr	r3, [pc, #172]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002976:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800297e:	4928      	ldr	r1, [pc, #160]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800298a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800298e:	d10d      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3304      	adds	r3, #4
 8002994:	2102      	movs	r1, #2
 8002996:	4618      	mov	r0, r3
 8002998:	f000 f844 	bl	8002a24 <RCCEx_PLLSAI1_Config>
 800299c:	4603      	mov	r3, r0
 800299e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029a0:	7cfb      	ldrb	r3, [r7, #19]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d014      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029a6:	7cfb      	ldrb	r3, [r7, #19]
 80029a8:	74bb      	strb	r3, [r7, #18]
 80029aa:	e011      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3320      	adds	r3, #32
 80029ba:	2102      	movs	r1, #2
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 f925 	bl	8002c0c <RCCEx_PLLSAI2_Config>
 80029c2:	4603      	mov	r3, r0
 80029c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029c6:	7cfb      	ldrb	r3, [r7, #19]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029cc:	7cfb      	ldrb	r3, [r7, #19]
 80029ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00a      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029dc:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029ea:	490d      	ldr	r1, [pc, #52]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00b      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029fe:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a0e:	4904      	ldr	r1, [pc, #16]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a16:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40021000 	.word	0x40021000

08002a24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a32:	4b75      	ldr	r3, [pc, #468]	; (8002c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d018      	beq.n	8002a70 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a3e:	4b72      	ldr	r3, [pc, #456]	; (8002c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f003 0203 	and.w	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d10d      	bne.n	8002a6a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
       ||
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a56:	4b6c      	ldr	r3, [pc, #432]	; (8002c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	091b      	lsrs	r3, r3, #4
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
       ||
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d047      	beq.n	8002afa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
 8002a6e:	e044      	b.n	8002afa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d018      	beq.n	8002aaa <RCCEx_PLLSAI1_Config+0x86>
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d825      	bhi.n	8002ac8 <RCCEx_PLLSAI1_Config+0xa4>
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d002      	beq.n	8002a86 <RCCEx_PLLSAI1_Config+0x62>
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d009      	beq.n	8002a98 <RCCEx_PLLSAI1_Config+0x74>
 8002a84:	e020      	b.n	8002ac8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a86:	4b60      	ldr	r3, [pc, #384]	; (8002c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d11d      	bne.n	8002ace <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a96:	e01a      	b.n	8002ace <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a98:	4b5b      	ldr	r3, [pc, #364]	; (8002c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d116      	bne.n	8002ad2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aa8:	e013      	b.n	8002ad2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002aaa:	4b57      	ldr	r3, [pc, #348]	; (8002c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10f      	bne.n	8002ad6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ab6:	4b54      	ldr	r3, [pc, #336]	; (8002c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ac6:	e006      	b.n	8002ad6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
      break;
 8002acc:	e004      	b.n	8002ad8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ace:	bf00      	nop
 8002ad0:	e002      	b.n	8002ad8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ad2:	bf00      	nop
 8002ad4:	e000      	b.n	8002ad8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ad6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10d      	bne.n	8002afa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ade:	4b4a      	ldr	r3, [pc, #296]	; (8002c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6819      	ldr	r1, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	430b      	orrs	r3, r1
 8002af4:	4944      	ldr	r1, [pc, #272]	; (8002c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d17d      	bne.n	8002bfc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b00:	4b41      	ldr	r3, [pc, #260]	; (8002c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a40      	ldr	r2, [pc, #256]	; (8002c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b0c:	f7fe faac 	bl	8001068 <HAL_GetTick>
 8002b10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b12:	e009      	b.n	8002b28 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b14:	f7fe faa8 	bl	8001068 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d902      	bls.n	8002b28 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	73fb      	strb	r3, [r7, #15]
        break;
 8002b26:	e005      	b.n	8002b34 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b28:	4b37      	ldr	r3, [pc, #220]	; (8002c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1ef      	bne.n	8002b14 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d160      	bne.n	8002bfc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d111      	bne.n	8002b64 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b40:	4b31      	ldr	r3, [pc, #196]	; (8002c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6892      	ldr	r2, [r2, #8]
 8002b50:	0211      	lsls	r1, r2, #8
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	68d2      	ldr	r2, [r2, #12]
 8002b56:	0912      	lsrs	r2, r2, #4
 8002b58:	0452      	lsls	r2, r2, #17
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	492a      	ldr	r1, [pc, #168]	; (8002c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	610b      	str	r3, [r1, #16]
 8002b62:	e027      	b.n	8002bb4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d112      	bne.n	8002b90 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b6a:	4b27      	ldr	r3, [pc, #156]	; (8002c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6892      	ldr	r2, [r2, #8]
 8002b7a:	0211      	lsls	r1, r2, #8
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6912      	ldr	r2, [r2, #16]
 8002b80:	0852      	lsrs	r2, r2, #1
 8002b82:	3a01      	subs	r2, #1
 8002b84:	0552      	lsls	r2, r2, #21
 8002b86:	430a      	orrs	r2, r1
 8002b88:	491f      	ldr	r1, [pc, #124]	; (8002c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	610b      	str	r3, [r1, #16]
 8002b8e:	e011      	b.n	8002bb4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b90:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6892      	ldr	r2, [r2, #8]
 8002ba0:	0211      	lsls	r1, r2, #8
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6952      	ldr	r2, [r2, #20]
 8002ba6:	0852      	lsrs	r2, r2, #1
 8002ba8:	3a01      	subs	r2, #1
 8002baa:	0652      	lsls	r2, r2, #25
 8002bac:	430a      	orrs	r2, r1
 8002bae:	4916      	ldr	r1, [pc, #88]	; (8002c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002bb4:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a13      	ldr	r2, [pc, #76]	; (8002c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bbe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc0:	f7fe fa52 	bl	8001068 <HAL_GetTick>
 8002bc4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bc6:	e009      	b.n	8002bdc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bc8:	f7fe fa4e 	bl	8001068 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d902      	bls.n	8002bdc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	73fb      	strb	r3, [r7, #15]
          break;
 8002bda:	e005      	b.n	8002be8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0ef      	beq.n	8002bc8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d106      	bne.n	8002bfc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002bee:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf0:	691a      	ldr	r2, [r3, #16]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	4904      	ldr	r1, [pc, #16]	; (8002c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40021000 	.word	0x40021000

08002c0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c1a:	4b6a      	ldr	r3, [pc, #424]	; (8002dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d018      	beq.n	8002c58 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c26:	4b67      	ldr	r3, [pc, #412]	; (8002dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f003 0203 	and.w	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d10d      	bne.n	8002c52 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
       ||
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d009      	beq.n	8002c52 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c3e:	4b61      	ldr	r3, [pc, #388]	; (8002dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	091b      	lsrs	r3, r3, #4
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
       ||
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d047      	beq.n	8002ce2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	73fb      	strb	r3, [r7, #15]
 8002c56:	e044      	b.n	8002ce2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d018      	beq.n	8002c92 <RCCEx_PLLSAI2_Config+0x86>
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d825      	bhi.n	8002cb0 <RCCEx_PLLSAI2_Config+0xa4>
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d002      	beq.n	8002c6e <RCCEx_PLLSAI2_Config+0x62>
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d009      	beq.n	8002c80 <RCCEx_PLLSAI2_Config+0x74>
 8002c6c:	e020      	b.n	8002cb0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c6e:	4b55      	ldr	r3, [pc, #340]	; (8002dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d11d      	bne.n	8002cb6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c7e:	e01a      	b.n	8002cb6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c80:	4b50      	ldr	r3, [pc, #320]	; (8002dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d116      	bne.n	8002cba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c90:	e013      	b.n	8002cba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c92:	4b4c      	ldr	r3, [pc, #304]	; (8002dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10f      	bne.n	8002cbe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c9e:	4b49      	ldr	r3, [pc, #292]	; (8002dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d109      	bne.n	8002cbe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cae:	e006      	b.n	8002cbe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cb4:	e004      	b.n	8002cc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cb6:	bf00      	nop
 8002cb8:	e002      	b.n	8002cc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cba:	bf00      	nop
 8002cbc:	e000      	b.n	8002cc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10d      	bne.n	8002ce2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cc6:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6819      	ldr	r1, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	430b      	orrs	r3, r1
 8002cdc:	4939      	ldr	r1, [pc, #228]	; (8002dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d167      	bne.n	8002db8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ce8:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a35      	ldr	r2, [pc, #212]	; (8002dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf4:	f7fe f9b8 	bl	8001068 <HAL_GetTick>
 8002cf8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cfa:	e009      	b.n	8002d10 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cfc:	f7fe f9b4 	bl	8001068 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d902      	bls.n	8002d10 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d0e:	e005      	b.n	8002d1c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d10:	4b2c      	ldr	r3, [pc, #176]	; (8002dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1ef      	bne.n	8002cfc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d14a      	bne.n	8002db8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d111      	bne.n	8002d4c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d28:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6892      	ldr	r2, [r2, #8]
 8002d38:	0211      	lsls	r1, r2, #8
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68d2      	ldr	r2, [r2, #12]
 8002d3e:	0912      	lsrs	r2, r2, #4
 8002d40:	0452      	lsls	r2, r2, #17
 8002d42:	430a      	orrs	r2, r1
 8002d44:	491f      	ldr	r1, [pc, #124]	; (8002dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	614b      	str	r3, [r1, #20]
 8002d4a:	e011      	b.n	8002d70 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d4c:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6892      	ldr	r2, [r2, #8]
 8002d5c:	0211      	lsls	r1, r2, #8
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6912      	ldr	r2, [r2, #16]
 8002d62:	0852      	lsrs	r2, r2, #1
 8002d64:	3a01      	subs	r2, #1
 8002d66:	0652      	lsls	r2, r2, #25
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	4916      	ldr	r1, [pc, #88]	; (8002dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d70:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a13      	ldr	r2, [pc, #76]	; (8002dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fe f974 	bl	8001068 <HAL_GetTick>
 8002d80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d82:	e009      	b.n	8002d98 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d84:	f7fe f970 	bl	8001068 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d902      	bls.n	8002d98 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	73fb      	strb	r3, [r7, #15]
          break;
 8002d96:	e005      	b.n	8002da4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d98:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0ef      	beq.n	8002d84 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d106      	bne.n	8002db8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002daa:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dac:	695a      	ldr	r2, [r3, #20]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	4904      	ldr	r1, [pc, #16]	; (8002dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40021000 	.word	0x40021000

08002dc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e049      	b.n	8002e6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7fd ff80 	bl	8000cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3304      	adds	r3, #4
 8002e04:	4619      	mov	r1, r3
 8002e06:	4610      	mov	r0, r2
 8002e08:	f000 fac0 	bl	800338c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d001      	beq.n	8002e90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e04f      	b.n	8002f30 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a23      	ldr	r2, [pc, #140]	; (8002f3c <HAL_TIM_Base_Start_IT+0xc4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d01d      	beq.n	8002eee <HAL_TIM_Base_Start_IT+0x76>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eba:	d018      	beq.n	8002eee <HAL_TIM_Base_Start_IT+0x76>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1f      	ldr	r2, [pc, #124]	; (8002f40 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d013      	beq.n	8002eee <HAL_TIM_Base_Start_IT+0x76>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a1e      	ldr	r2, [pc, #120]	; (8002f44 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d00e      	beq.n	8002eee <HAL_TIM_Base_Start_IT+0x76>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a1c      	ldr	r2, [pc, #112]	; (8002f48 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d009      	beq.n	8002eee <HAL_TIM_Base_Start_IT+0x76>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a1b      	ldr	r2, [pc, #108]	; (8002f4c <HAL_TIM_Base_Start_IT+0xd4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d004      	beq.n	8002eee <HAL_TIM_Base_Start_IT+0x76>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a19      	ldr	r2, [pc, #100]	; (8002f50 <HAL_TIM_Base_Start_IT+0xd8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d115      	bne.n	8002f1a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	4b17      	ldr	r3, [pc, #92]	; (8002f54 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2b06      	cmp	r3, #6
 8002efe:	d015      	beq.n	8002f2c <HAL_TIM_Base_Start_IT+0xb4>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f06:	d011      	beq.n	8002f2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0201 	orr.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f18:	e008      	b.n	8002f2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f042 0201 	orr.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	e000      	b.n	8002f2e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	40012c00 	.word	0x40012c00
 8002f40:	40000400 	.word	0x40000400
 8002f44:	40000800 	.word	0x40000800
 8002f48:	40000c00 	.word	0x40000c00
 8002f4c:	40013400 	.word	0x40013400
 8002f50:	40014000 	.word	0x40014000
 8002f54:	00010007 	.word	0x00010007

08002f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d122      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d11b      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0202 	mvn.w	r2, #2
 8002f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f9d8 	bl	8003350 <HAL_TIM_IC_CaptureCallback>
 8002fa0:	e005      	b.n	8002fae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f9ca 	bl	800333c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f9db 	bl	8003364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d122      	bne.n	8003008 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d11b      	bne.n	8003008 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0204 	mvn.w	r2, #4
 8002fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f9ae 	bl	8003350 <HAL_TIM_IC_CaptureCallback>
 8002ff4:	e005      	b.n	8003002 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f9a0 	bl	800333c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f9b1 	bl	8003364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b08      	cmp	r3, #8
 8003014:	d122      	bne.n	800305c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b08      	cmp	r3, #8
 8003022:	d11b      	bne.n	800305c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f06f 0208 	mvn.w	r2, #8
 800302c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2204      	movs	r2, #4
 8003032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f984 	bl	8003350 <HAL_TIM_IC_CaptureCallback>
 8003048:	e005      	b.n	8003056 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f976 	bl	800333c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f987 	bl	8003364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	2b10      	cmp	r3, #16
 8003068:	d122      	bne.n	80030b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b10      	cmp	r3, #16
 8003076:	d11b      	bne.n	80030b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0210 	mvn.w	r2, #16
 8003080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2208      	movs	r2, #8
 8003086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f95a 	bl	8003350 <HAL_TIM_IC_CaptureCallback>
 800309c:	e005      	b.n	80030aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f94c 	bl	800333c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f95d 	bl	8003364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d10e      	bne.n	80030dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d107      	bne.n	80030dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f06f 0201 	mvn.w	r2, #1
 80030d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f926 	bl	8003328 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e6:	2b80      	cmp	r3, #128	; 0x80
 80030e8:	d10e      	bne.n	8003108 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f4:	2b80      	cmp	r3, #128	; 0x80
 80030f6:	d107      	bne.n	8003108 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fb08 	bl	8003718 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003116:	d10e      	bne.n	8003136 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003122:	2b80      	cmp	r3, #128	; 0x80
 8003124:	d107      	bne.n	8003136 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800312e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 fafb 	bl	800372c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003140:	2b40      	cmp	r3, #64	; 0x40
 8003142:	d10e      	bne.n	8003162 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314e:	2b40      	cmp	r3, #64	; 0x40
 8003150:	d107      	bne.n	8003162 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800315a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f90b 	bl	8003378 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b20      	cmp	r3, #32
 800316e:	d10e      	bne.n	800318e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f003 0320 	and.w	r3, r3, #32
 800317a:	2b20      	cmp	r3, #32
 800317c:	d107      	bne.n	800318e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f06f 0220 	mvn.w	r2, #32
 8003186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fabb 	bl	8003704 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b084      	sub	sp, #16
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_TIM_ConfigClockSource+0x1c>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e0b6      	b.n	8003320 <HAL_TIM_ConfigClockSource+0x18a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2202      	movs	r2, #2
 80031be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031d4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031dc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ee:	d03e      	beq.n	800326e <HAL_TIM_ConfigClockSource+0xd8>
 80031f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f4:	f200 8087 	bhi.w	8003306 <HAL_TIM_ConfigClockSource+0x170>
 80031f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031fc:	f000 8086 	beq.w	800330c <HAL_TIM_ConfigClockSource+0x176>
 8003200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003204:	d87f      	bhi.n	8003306 <HAL_TIM_ConfigClockSource+0x170>
 8003206:	2b70      	cmp	r3, #112	; 0x70
 8003208:	d01a      	beq.n	8003240 <HAL_TIM_ConfigClockSource+0xaa>
 800320a:	2b70      	cmp	r3, #112	; 0x70
 800320c:	d87b      	bhi.n	8003306 <HAL_TIM_ConfigClockSource+0x170>
 800320e:	2b60      	cmp	r3, #96	; 0x60
 8003210:	d050      	beq.n	80032b4 <HAL_TIM_ConfigClockSource+0x11e>
 8003212:	2b60      	cmp	r3, #96	; 0x60
 8003214:	d877      	bhi.n	8003306 <HAL_TIM_ConfigClockSource+0x170>
 8003216:	2b50      	cmp	r3, #80	; 0x50
 8003218:	d03c      	beq.n	8003294 <HAL_TIM_ConfigClockSource+0xfe>
 800321a:	2b50      	cmp	r3, #80	; 0x50
 800321c:	d873      	bhi.n	8003306 <HAL_TIM_ConfigClockSource+0x170>
 800321e:	2b40      	cmp	r3, #64	; 0x40
 8003220:	d058      	beq.n	80032d4 <HAL_TIM_ConfigClockSource+0x13e>
 8003222:	2b40      	cmp	r3, #64	; 0x40
 8003224:	d86f      	bhi.n	8003306 <HAL_TIM_ConfigClockSource+0x170>
 8003226:	2b30      	cmp	r3, #48	; 0x30
 8003228:	d064      	beq.n	80032f4 <HAL_TIM_ConfigClockSource+0x15e>
 800322a:	2b30      	cmp	r3, #48	; 0x30
 800322c:	d86b      	bhi.n	8003306 <HAL_TIM_ConfigClockSource+0x170>
 800322e:	2b20      	cmp	r3, #32
 8003230:	d060      	beq.n	80032f4 <HAL_TIM_ConfigClockSource+0x15e>
 8003232:	2b20      	cmp	r3, #32
 8003234:	d867      	bhi.n	8003306 <HAL_TIM_ConfigClockSource+0x170>
 8003236:	2b00      	cmp	r3, #0
 8003238:	d05c      	beq.n	80032f4 <HAL_TIM_ConfigClockSource+0x15e>
 800323a:	2b10      	cmp	r3, #16
 800323c:	d05a      	beq.n	80032f4 <HAL_TIM_ConfigClockSource+0x15e>
 800323e:	e062      	b.n	8003306 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	6899      	ldr	r1, [r3, #8]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f000 f9b0 	bl	80035b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003262:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	609a      	str	r2, [r3, #8]
      break;
 800326c:	e04f      	b.n	800330e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6899      	ldr	r1, [r3, #8]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f000 f999 	bl	80035b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003290:	609a      	str	r2, [r3, #8]
      break;
 8003292:	e03c      	b.n	800330e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	6859      	ldr	r1, [r3, #4]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	461a      	mov	r2, r3
 80032a2:	f000 f90d 	bl	80034c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2150      	movs	r1, #80	; 0x50
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 f966 	bl	800357e <TIM_ITRx_SetConfig>
      break;
 80032b2:	e02c      	b.n	800330e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6818      	ldr	r0, [r3, #0]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	6859      	ldr	r1, [r3, #4]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	461a      	mov	r2, r3
 80032c2:	f000 f92c 	bl	800351e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2160      	movs	r1, #96	; 0x60
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 f956 	bl	800357e <TIM_ITRx_SetConfig>
      break;
 80032d2:	e01c      	b.n	800330e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	6859      	ldr	r1, [r3, #4]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	461a      	mov	r2, r3
 80032e2:	f000 f8ed 	bl	80034c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2140      	movs	r1, #64	; 0x40
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 f946 	bl	800357e <TIM_ITRx_SetConfig>
      break;
 80032f2:	e00c      	b.n	800330e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4619      	mov	r1, r3
 80032fe:	4610      	mov	r0, r2
 8003300:	f000 f93d 	bl	800357e <TIM_ITRx_SetConfig>
      break;
 8003304:	e003      	b.n	800330e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	73fb      	strb	r3, [r7, #15]
      break;
 800330a:	e000      	b.n	800330e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800330c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800331e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a40      	ldr	r2, [pc, #256]	; (80034a0 <TIM_Base_SetConfig+0x114>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d013      	beq.n	80033cc <TIM_Base_SetConfig+0x40>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033aa:	d00f      	beq.n	80033cc <TIM_Base_SetConfig+0x40>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a3d      	ldr	r2, [pc, #244]	; (80034a4 <TIM_Base_SetConfig+0x118>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00b      	beq.n	80033cc <TIM_Base_SetConfig+0x40>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a3c      	ldr	r2, [pc, #240]	; (80034a8 <TIM_Base_SetConfig+0x11c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d007      	beq.n	80033cc <TIM_Base_SetConfig+0x40>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a3b      	ldr	r2, [pc, #236]	; (80034ac <TIM_Base_SetConfig+0x120>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d003      	beq.n	80033cc <TIM_Base_SetConfig+0x40>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a3a      	ldr	r2, [pc, #232]	; (80034b0 <TIM_Base_SetConfig+0x124>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d108      	bne.n	80033de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a2f      	ldr	r2, [pc, #188]	; (80034a0 <TIM_Base_SetConfig+0x114>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d01f      	beq.n	8003426 <TIM_Base_SetConfig+0x9a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ec:	d01b      	beq.n	8003426 <TIM_Base_SetConfig+0x9a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a2c      	ldr	r2, [pc, #176]	; (80034a4 <TIM_Base_SetConfig+0x118>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d017      	beq.n	8003426 <TIM_Base_SetConfig+0x9a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a2b      	ldr	r2, [pc, #172]	; (80034a8 <TIM_Base_SetConfig+0x11c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d013      	beq.n	8003426 <TIM_Base_SetConfig+0x9a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a2a      	ldr	r2, [pc, #168]	; (80034ac <TIM_Base_SetConfig+0x120>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00f      	beq.n	8003426 <TIM_Base_SetConfig+0x9a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a29      	ldr	r2, [pc, #164]	; (80034b0 <TIM_Base_SetConfig+0x124>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00b      	beq.n	8003426 <TIM_Base_SetConfig+0x9a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a28      	ldr	r2, [pc, #160]	; (80034b4 <TIM_Base_SetConfig+0x128>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d007      	beq.n	8003426 <TIM_Base_SetConfig+0x9a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a27      	ldr	r2, [pc, #156]	; (80034b8 <TIM_Base_SetConfig+0x12c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d003      	beq.n	8003426 <TIM_Base_SetConfig+0x9a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a26      	ldr	r2, [pc, #152]	; (80034bc <TIM_Base_SetConfig+0x130>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d108      	bne.n	8003438 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800342c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4313      	orrs	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a10      	ldr	r2, [pc, #64]	; (80034a0 <TIM_Base_SetConfig+0x114>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00f      	beq.n	8003484 <TIM_Base_SetConfig+0xf8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a12      	ldr	r2, [pc, #72]	; (80034b0 <TIM_Base_SetConfig+0x124>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d00b      	beq.n	8003484 <TIM_Base_SetConfig+0xf8>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a11      	ldr	r2, [pc, #68]	; (80034b4 <TIM_Base_SetConfig+0x128>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d007      	beq.n	8003484 <TIM_Base_SetConfig+0xf8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a10      	ldr	r2, [pc, #64]	; (80034b8 <TIM_Base_SetConfig+0x12c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d003      	beq.n	8003484 <TIM_Base_SetConfig+0xf8>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a0f      	ldr	r2, [pc, #60]	; (80034bc <TIM_Base_SetConfig+0x130>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d103      	bne.n	800348c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	615a      	str	r2, [r3, #20]
}
 8003492:	bf00      	nop
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40012c00 	.word	0x40012c00
 80034a4:	40000400 	.word	0x40000400
 80034a8:	40000800 	.word	0x40000800
 80034ac:	40000c00 	.word	0x40000c00
 80034b0:	40013400 	.word	0x40013400
 80034b4:	40014000 	.word	0x40014000
 80034b8:	40014400 	.word	0x40014400
 80034bc:	40014800 	.word	0x40014800

080034c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	f023 0201 	bic.w	r2, r3, #1
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f023 030a 	bic.w	r3, r3, #10
 80034fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4313      	orrs	r3, r2
 8003504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	621a      	str	r2, [r3, #32]
}
 8003512:	bf00      	nop
 8003514:	371c      	adds	r7, #28
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800351e:	b480      	push	{r7}
 8003520:	b087      	sub	sp, #28
 8003522:	af00      	add	r7, sp, #0
 8003524:	60f8      	str	r0, [r7, #12]
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	f023 0210 	bic.w	r2, r3, #16
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003548:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	031b      	lsls	r3, r3, #12
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4313      	orrs	r3, r2
 8003552:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800355a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	4313      	orrs	r3, r2
 8003564:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	621a      	str	r2, [r3, #32]
}
 8003572:	bf00      	nop
 8003574:	371c      	adds	r7, #28
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800357e:	b480      	push	{r7}
 8003580:	b085      	sub	sp, #20
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003594:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	f043 0307 	orr.w	r3, r3, #7
 80035a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	609a      	str	r2, [r3, #8]
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
 80035c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	021a      	lsls	r2, r3, #8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	431a      	orrs	r2, r3
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	4313      	orrs	r3, r2
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	609a      	str	r2, [r3, #8]
}
 80035e8:	bf00      	nop
 80035ea:	371c      	adds	r7, #28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003608:	2302      	movs	r3, #2
 800360a:	e068      	b.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a2e      	ldr	r2, [pc, #184]	; (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d004      	beq.n	8003640 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a2d      	ldr	r2, [pc, #180]	; (80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d108      	bne.n	8003652 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003646:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003658:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4313      	orrs	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a1e      	ldr	r2, [pc, #120]	; (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d01d      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367e:	d018      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1b      	ldr	r2, [pc, #108]	; (80036f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1a      	ldr	r2, [pc, #104]	; (80036f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00e      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a18      	ldr	r2, [pc, #96]	; (80036fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d009      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a13      	ldr	r2, [pc, #76]	; (80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a14      	ldr	r2, [pc, #80]	; (8003700 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d10c      	bne.n	80036cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40012c00 	.word	0x40012c00
 80036f0:	40013400 	.word	0x40013400
 80036f4:	40000400 	.word	0x40000400
 80036f8:	40000800 	.word	0x40000800
 80036fc:	40000c00 	.word	0x40000c00
 8003700:	40014000 	.word	0x40014000

08003704 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e040      	b.n	80037d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fd faec 	bl	8000d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2224      	movs	r2, #36	; 0x24
 800376c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0201 	bic.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fcea 	bl	8004158 <UART_SetConfig>
 8003784:	4603      	mov	r3, r0
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e022      	b.n	80037d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 ff96 	bl	80046c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f001 f81d 	bl	800480c <UART_CheckIdleState>
 80037d2:	4603      	mov	r3, r0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	; 0x28
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	4613      	mov	r3, r2
 80037ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	f040 8082 	bne.w	80038fa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <HAL_UART_Transmit+0x26>
 80037fc:	88fb      	ldrh	r3, [r7, #6]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e07a      	b.n	80038fc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_UART_Transmit+0x38>
 8003810:	2302      	movs	r3, #2
 8003812:	e073      	b.n	80038fc <HAL_UART_Transmit+0x120>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2221      	movs	r2, #33	; 0x21
 8003828:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800382a:	f7fd fc1d 	bl	8001068 <HAL_GetTick>
 800382e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	88fa      	ldrh	r2, [r7, #6]
 8003834:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	88fa      	ldrh	r2, [r7, #6]
 800383c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003848:	d108      	bne.n	800385c <HAL_UART_Transmit+0x80>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d104      	bne.n	800385c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	e003      	b.n	8003864 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003860:	2300      	movs	r3, #0
 8003862:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800386c:	e02d      	b.n	80038ca <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2200      	movs	r2, #0
 8003876:	2180      	movs	r1, #128	; 0x80
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f001 f810 	bl	800489e <UART_WaitOnFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e039      	b.n	80038fc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10b      	bne.n	80038a6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	881a      	ldrh	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800389a:	b292      	uxth	r2, r2
 800389c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	3302      	adds	r3, #2
 80038a2:	61bb      	str	r3, [r7, #24]
 80038a4:	e008      	b.n	80038b8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	781a      	ldrb	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	b292      	uxth	r2, r2
 80038b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3301      	adds	r3, #1
 80038b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1cb      	bne.n	800386e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2200      	movs	r2, #0
 80038de:	2140      	movs	r1, #64	; 0x40
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 ffdc 	bl	800489e <UART_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e005      	b.n	80038fc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	e000      	b.n	80038fc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80038fa:	2302      	movs	r3, #2
  }
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3720      	adds	r7, #32
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	4613      	mov	r3, r2
 8003910:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003916:	2b20      	cmp	r3, #32
 8003918:	d142      	bne.n	80039a0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <HAL_UART_Receive_IT+0x22>
 8003920:	88fb      	ldrh	r3, [r7, #6]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e03b      	b.n	80039a2 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_UART_Receive_IT+0x34>
 8003934:	2302      	movs	r3, #2
 8003936:	e034      	b.n	80039a2 <HAL_UART_Receive_IT+0x9e>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a18      	ldr	r2, [pc, #96]	; (80039ac <HAL_UART_Receive_IT+0xa8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d01f      	beq.n	8003990 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d018      	beq.n	8003990 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	e853 3f00 	ldrex	r3, [r3]
 800396a:	613b      	str	r3, [r7, #16]
   return(result);
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003972:	627b      	str	r3, [r7, #36]	; 0x24
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	461a      	mov	r2, r3
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	623b      	str	r3, [r7, #32]
 800397e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	69f9      	ldr	r1, [r7, #28]
 8003982:	6a3a      	ldr	r2, [r7, #32]
 8003984:	e841 2300 	strex	r3, r2, [r1]
 8003988:	61bb      	str	r3, [r7, #24]
   return(result);
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1e6      	bne.n	800395e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003990:	88fb      	ldrh	r3, [r7, #6]
 8003992:	461a      	mov	r2, r3
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f001 f846 	bl	8004a28 <UART_Start_Receive_IT>
 800399c:	4603      	mov	r3, r0
 800399e:	e000      	b.n	80039a2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80039a0:	2302      	movs	r3, #2
  }
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3728      	adds	r7, #40	; 0x28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40008000 	.word	0x40008000

080039b0 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b09a      	sub	sp, #104	; 0x68
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039c0:	e853 3f00 	ldrex	r3, [r3]
 80039c4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80039c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039cc:	667b      	str	r3, [r7, #100]	; 0x64
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039d6:	657b      	str	r3, [r7, #84]	; 0x54
 80039d8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80039dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80039de:	e841 2300 	strex	r3, r2, [r1]
 80039e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80039e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1e6      	bne.n	80039b8 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3308      	adds	r3, #8
 80039f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	663b      	str	r3, [r7, #96]	; 0x60
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3308      	adds	r3, #8
 8003a08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a0a:	643a      	str	r2, [r7, #64]	; 0x40
 8003a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a12:	e841 2300 	strex	r3, r2, [r1]
 8003a16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1e5      	bne.n	80039ea <HAL_UART_AbortReceive_IT+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d118      	bne.n	8003a58 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	e853 3f00 	ldrex	r3, [r3]
 8003a32:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f023 0310 	bic.w	r3, r3, #16
 8003a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	461a      	mov	r2, r3
 8003a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a46:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a4c:	e841 2300 	strex	r3, r2, [r1]
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e6      	bne.n	8003a26 <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	d150      	bne.n	8003b08 <HAL_UART_AbortReceive_IT+0x158>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	3308      	adds	r3, #8
 8003a6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	e853 3f00 	ldrex	r3, [r3]
 8003a74:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	3308      	adds	r3, #8
 8003a84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a86:	61ba      	str	r2, [r7, #24]
 8003a88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8a:	6979      	ldr	r1, [r7, #20]
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	e841 2300 	strex	r3, r2, [r1]
 8003a92:	613b      	str	r3, [r7, #16]
   return(result);
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1e5      	bne.n	8003a66 <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d013      	beq.n	8003aca <HAL_UART_AbortReceive_IT+0x11a>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa6:	4a25      	ldr	r2, [pc, #148]	; (8003b3c <HAL_UART_AbortReceive_IT+0x18c>)
 8003aa8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fd fc35 	bl	800131e <HAL_DMA_Abort_IT>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d03a      	beq.n	8003b30 <HAL_UART_AbortReceive_IT+0x180>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	4798      	blx	r3
 8003ac8:	e032      	b.n	8003b30 <HAL_UART_AbortReceive_IT+0x180>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	220f      	movs	r2, #15
 8003ade:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	8b1b      	ldrh	r3, [r3, #24]
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f042 0208 	orr.w	r2, r2, #8
 8003af0:	b292      	uxth	r2, r2
 8003af2:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2220      	movs	r2, #32
 8003af8:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 fb13 	bl	800412c <HAL_UART_AbortReceiveCpltCallback>
 8003b06:	e013      	b.n	8003b30 <HAL_UART_AbortReceive_IT+0x180>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	220f      	movs	r2, #15
 8003b1c:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fafe 	bl	800412c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3768      	adds	r7, #104	; 0x68
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	08004caf 	.word	0x08004caf

08003b40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b0ba      	sub	sp, #232	; 0xe8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003b6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003b6e:	4013      	ands	r3, r2
 8003b70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003b74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d115      	bne.n	8003ba8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b80:	f003 0320 	and.w	r3, r3, #32
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00f      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d009      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 82a6 	beq.w	80040ea <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	4798      	blx	r3
      }
      return;
 8003ba6:	e2a0      	b.n	80040ea <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003ba8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 8117 	beq.w	8003de0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d106      	bne.n	8003bcc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003bbe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003bc2:	4b85      	ldr	r3, [pc, #532]	; (8003dd8 <HAL_UART_IRQHandler+0x298>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 810a 	beq.w	8003de0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d011      	beq.n	8003bfc <HAL_UART_IRQHandler+0xbc>
 8003bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00b      	beq.n	8003bfc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2201      	movs	r2, #1
 8003bea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bf2:	f043 0201 	orr.w	r2, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d011      	beq.n	8003c2c <HAL_UART_IRQHandler+0xec>
 8003c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00b      	beq.n	8003c2c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2202      	movs	r2, #2
 8003c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c22:	f043 0204 	orr.w	r2, r3, #4
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d011      	beq.n	8003c5c <HAL_UART_IRQHandler+0x11c>
 8003c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00b      	beq.n	8003c5c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2204      	movs	r2, #4
 8003c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c52:	f043 0202 	orr.w	r2, r3, #2
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d017      	beq.n	8003c98 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d105      	bne.n	8003c80 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c78:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00b      	beq.n	8003c98 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2208      	movs	r2, #8
 8003c86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c8e:	f043 0208 	orr.w	r2, r3, #8
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d012      	beq.n	8003cca <HAL_UART_IRQHandler+0x18a>
 8003ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ca8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00c      	beq.n	8003cca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cc0:	f043 0220 	orr.w	r2, r3, #32
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 820c 	beq.w	80040ee <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00d      	beq.n	8003cfe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d007      	beq.n	8003cfe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d12:	2b40      	cmp	r3, #64	; 0x40
 8003d14:	d005      	beq.n	8003d22 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d04f      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 ff4a 	bl	8004bbc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d32:	2b40      	cmp	r3, #64	; 0x40
 8003d34:	d141      	bne.n	8003dba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3308      	adds	r3, #8
 8003d5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d72:	e841 2300 	strex	r3, r2, [r1]
 8003d76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1d9      	bne.n	8003d36 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d013      	beq.n	8003db2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	4a13      	ldr	r2, [pc, #76]	; (8003ddc <HAL_UART_IRQHandler+0x29c>)
 8003d90:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fd fac1 	bl	800131e <HAL_DMA_Abort_IT>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d017      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003dac:	4610      	mov	r0, r2
 8003dae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db0:	e00f      	b.n	8003dd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f9b0 	bl	8004118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db8:	e00b      	b.n	8003dd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f9ac 	bl	8004118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc0:	e007      	b.n	8003dd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f9a8 	bl	8004118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003dd0:	e18d      	b.n	80040ee <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd2:	bf00      	nop
    return;
 8003dd4:	e18b      	b.n	80040ee <HAL_UART_IRQHandler+0x5ae>
 8003dd6:	bf00      	nop
 8003dd8:	04000120 	.word	0x04000120
 8003ddc:	08004c83 	.word	0x08004c83

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	f040 8146 	bne.w	8004076 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dee:	f003 0310 	and.w	r3, r3, #16
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 813f 	beq.w	8004076 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dfc:	f003 0310 	and.w	r3, r3, #16
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 8138 	beq.w	8004076 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2210      	movs	r2, #16
 8003e0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e18:	2b40      	cmp	r3, #64	; 0x40
 8003e1a:	f040 80b4 	bne.w	8003f86 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e2a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 815f 	beq.w	80040f2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	f080 8157 	bcs.w	80040f2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f040 8085 	bne.w	8003f6a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	461a      	mov	r2, r3
 8003e86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e9a:	e841 2300 	strex	r3, r2, [r1]
 8003e9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1da      	bne.n	8003e60 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3308      	adds	r3, #8
 8003eb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb4:	e853 3f00 	ldrex	r3, [r3]
 8003eb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003eba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3308      	adds	r3, #8
 8003eca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ece:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ed2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ed6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003eda:	e841 2300 	strex	r3, r2, [r1]
 8003ede:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e1      	bne.n	8003eaa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3308      	adds	r3, #8
 8003eec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003efc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3308      	adds	r3, #8
 8003f06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1e3      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2220      	movs	r2, #32
 8003f22:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f32:	e853 3f00 	ldrex	r3, [r3]
 8003f36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f3a:	f023 0310 	bic.w	r3, r3, #16
 8003f3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f4e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f54:	e841 2300 	strex	r3, r2, [r1]
 8003f58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1e4      	bne.n	8003f2a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fd f99c 	bl	80012a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f8de 	bl	8004140 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f84:	e0b5      	b.n	80040f2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 80a7 	beq.w	80040f6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003fa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 80a2 	beq.w	80040f6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fba:	e853 3f00 	ldrex	r3, [r3]
 8003fbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e4      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3308      	adds	r3, #8
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	623b      	str	r3, [r7, #32]
   return(result);
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	f023 0301 	bic.w	r3, r3, #1
 8003ffe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3308      	adds	r3, #8
 8004008:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800400c:	633a      	str	r2, [r7, #48]	; 0x30
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e3      	bne.n	8003fe8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	e853 3f00 	ldrex	r3, [r3]
 800403e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0310 	bic.w	r3, r3, #16
 8004046:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004054:	61fb      	str	r3, [r7, #28]
 8004056:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	69b9      	ldr	r1, [r7, #24]
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	617b      	str	r3, [r7, #20]
   return(result);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e4      	bne.n	8004032 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004068:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800406c:	4619      	mov	r1, r3
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f866 	bl	8004140 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004074:	e03f      	b.n	80040f6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00e      	beq.n	80040a0 <HAL_UART_IRQHandler+0x560>
 8004082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d008      	beq.n	80040a0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004096:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 ffb8 	bl	800500e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800409e:	e02d      	b.n	80040fc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80040a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00e      	beq.n	80040ca <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80040ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d008      	beq.n	80040ca <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01c      	beq.n	80040fa <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	4798      	blx	r3
    }
    return;
 80040c8:	e017      	b.n	80040fa <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d012      	beq.n	80040fc <HAL_UART_IRQHandler+0x5bc>
 80040d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00c      	beq.n	80040fc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 fe09 	bl	8004cfa <UART_EndTransmit_IT>
    return;
 80040e8:	e008      	b.n	80040fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80040ea:	bf00      	nop
 80040ec:	e006      	b.n	80040fc <HAL_UART_IRQHandler+0x5bc>
    return;
 80040ee:	bf00      	nop
 80040f0:	e004      	b.n	80040fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80040f2:	bf00      	nop
 80040f4:	e002      	b.n	80040fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80040f6:	bf00      	nop
 80040f8:	e000      	b.n	80040fc <HAL_UART_IRQHandler+0x5bc>
    return;
 80040fa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80040fc:	37e8      	adds	r7, #232	; 0xe8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop

08004104 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800415c:	b08a      	sub	sp, #40	; 0x28
 800415e:	af00      	add	r7, sp, #0
 8004160:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	431a      	orrs	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	431a      	orrs	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	4313      	orrs	r3, r2
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	4ba4      	ldr	r3, [pc, #656]	; (8004418 <UART_SetConfig+0x2c0>)
 8004188:	4013      	ands	r3, r2
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	6812      	ldr	r2, [r2, #0]
 800418e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004190:	430b      	orrs	r3, r1
 8004192:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a99      	ldr	r2, [pc, #612]	; (800441c <UART_SetConfig+0x2c4>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d004      	beq.n	80041c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c0:	4313      	orrs	r3, r2
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d4:	430a      	orrs	r2, r1
 80041d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a90      	ldr	r2, [pc, #576]	; (8004420 <UART_SetConfig+0x2c8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d126      	bne.n	8004230 <UART_SetConfig+0xd8>
 80041e2:	4b90      	ldr	r3, [pc, #576]	; (8004424 <UART_SetConfig+0x2cc>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e8:	f003 0303 	and.w	r3, r3, #3
 80041ec:	2b03      	cmp	r3, #3
 80041ee:	d81b      	bhi.n	8004228 <UART_SetConfig+0xd0>
 80041f0:	a201      	add	r2, pc, #4	; (adr r2, 80041f8 <UART_SetConfig+0xa0>)
 80041f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f6:	bf00      	nop
 80041f8:	08004209 	.word	0x08004209
 80041fc:	08004219 	.word	0x08004219
 8004200:	08004211 	.word	0x08004211
 8004204:	08004221 	.word	0x08004221
 8004208:	2301      	movs	r3, #1
 800420a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800420e:	e116      	b.n	800443e <UART_SetConfig+0x2e6>
 8004210:	2302      	movs	r3, #2
 8004212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004216:	e112      	b.n	800443e <UART_SetConfig+0x2e6>
 8004218:	2304      	movs	r3, #4
 800421a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800421e:	e10e      	b.n	800443e <UART_SetConfig+0x2e6>
 8004220:	2308      	movs	r3, #8
 8004222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004226:	e10a      	b.n	800443e <UART_SetConfig+0x2e6>
 8004228:	2310      	movs	r3, #16
 800422a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800422e:	e106      	b.n	800443e <UART_SetConfig+0x2e6>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a7c      	ldr	r2, [pc, #496]	; (8004428 <UART_SetConfig+0x2d0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d138      	bne.n	80042ac <UART_SetConfig+0x154>
 800423a:	4b7a      	ldr	r3, [pc, #488]	; (8004424 <UART_SetConfig+0x2cc>)
 800423c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004240:	f003 030c 	and.w	r3, r3, #12
 8004244:	2b0c      	cmp	r3, #12
 8004246:	d82d      	bhi.n	80042a4 <UART_SetConfig+0x14c>
 8004248:	a201      	add	r2, pc, #4	; (adr r2, 8004250 <UART_SetConfig+0xf8>)
 800424a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424e:	bf00      	nop
 8004250:	08004285 	.word	0x08004285
 8004254:	080042a5 	.word	0x080042a5
 8004258:	080042a5 	.word	0x080042a5
 800425c:	080042a5 	.word	0x080042a5
 8004260:	08004295 	.word	0x08004295
 8004264:	080042a5 	.word	0x080042a5
 8004268:	080042a5 	.word	0x080042a5
 800426c:	080042a5 	.word	0x080042a5
 8004270:	0800428d 	.word	0x0800428d
 8004274:	080042a5 	.word	0x080042a5
 8004278:	080042a5 	.word	0x080042a5
 800427c:	080042a5 	.word	0x080042a5
 8004280:	0800429d 	.word	0x0800429d
 8004284:	2300      	movs	r3, #0
 8004286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428a:	e0d8      	b.n	800443e <UART_SetConfig+0x2e6>
 800428c:	2302      	movs	r3, #2
 800428e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004292:	e0d4      	b.n	800443e <UART_SetConfig+0x2e6>
 8004294:	2304      	movs	r3, #4
 8004296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429a:	e0d0      	b.n	800443e <UART_SetConfig+0x2e6>
 800429c:	2308      	movs	r3, #8
 800429e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a2:	e0cc      	b.n	800443e <UART_SetConfig+0x2e6>
 80042a4:	2310      	movs	r3, #16
 80042a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042aa:	e0c8      	b.n	800443e <UART_SetConfig+0x2e6>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a5e      	ldr	r2, [pc, #376]	; (800442c <UART_SetConfig+0x2d4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d125      	bne.n	8004302 <UART_SetConfig+0x1aa>
 80042b6:	4b5b      	ldr	r3, [pc, #364]	; (8004424 <UART_SetConfig+0x2cc>)
 80042b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042c0:	2b30      	cmp	r3, #48	; 0x30
 80042c2:	d016      	beq.n	80042f2 <UART_SetConfig+0x19a>
 80042c4:	2b30      	cmp	r3, #48	; 0x30
 80042c6:	d818      	bhi.n	80042fa <UART_SetConfig+0x1a2>
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	d00a      	beq.n	80042e2 <UART_SetConfig+0x18a>
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	d814      	bhi.n	80042fa <UART_SetConfig+0x1a2>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <UART_SetConfig+0x182>
 80042d4:	2b10      	cmp	r3, #16
 80042d6:	d008      	beq.n	80042ea <UART_SetConfig+0x192>
 80042d8:	e00f      	b.n	80042fa <UART_SetConfig+0x1a2>
 80042da:	2300      	movs	r3, #0
 80042dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e0:	e0ad      	b.n	800443e <UART_SetConfig+0x2e6>
 80042e2:	2302      	movs	r3, #2
 80042e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e8:	e0a9      	b.n	800443e <UART_SetConfig+0x2e6>
 80042ea:	2304      	movs	r3, #4
 80042ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f0:	e0a5      	b.n	800443e <UART_SetConfig+0x2e6>
 80042f2:	2308      	movs	r3, #8
 80042f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f8:	e0a1      	b.n	800443e <UART_SetConfig+0x2e6>
 80042fa:	2310      	movs	r3, #16
 80042fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004300:	e09d      	b.n	800443e <UART_SetConfig+0x2e6>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a4a      	ldr	r2, [pc, #296]	; (8004430 <UART_SetConfig+0x2d8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d125      	bne.n	8004358 <UART_SetConfig+0x200>
 800430c:	4b45      	ldr	r3, [pc, #276]	; (8004424 <UART_SetConfig+0x2cc>)
 800430e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004312:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004316:	2bc0      	cmp	r3, #192	; 0xc0
 8004318:	d016      	beq.n	8004348 <UART_SetConfig+0x1f0>
 800431a:	2bc0      	cmp	r3, #192	; 0xc0
 800431c:	d818      	bhi.n	8004350 <UART_SetConfig+0x1f8>
 800431e:	2b80      	cmp	r3, #128	; 0x80
 8004320:	d00a      	beq.n	8004338 <UART_SetConfig+0x1e0>
 8004322:	2b80      	cmp	r3, #128	; 0x80
 8004324:	d814      	bhi.n	8004350 <UART_SetConfig+0x1f8>
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <UART_SetConfig+0x1d8>
 800432a:	2b40      	cmp	r3, #64	; 0x40
 800432c:	d008      	beq.n	8004340 <UART_SetConfig+0x1e8>
 800432e:	e00f      	b.n	8004350 <UART_SetConfig+0x1f8>
 8004330:	2300      	movs	r3, #0
 8004332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004336:	e082      	b.n	800443e <UART_SetConfig+0x2e6>
 8004338:	2302      	movs	r3, #2
 800433a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800433e:	e07e      	b.n	800443e <UART_SetConfig+0x2e6>
 8004340:	2304      	movs	r3, #4
 8004342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004346:	e07a      	b.n	800443e <UART_SetConfig+0x2e6>
 8004348:	2308      	movs	r3, #8
 800434a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434e:	e076      	b.n	800443e <UART_SetConfig+0x2e6>
 8004350:	2310      	movs	r3, #16
 8004352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004356:	e072      	b.n	800443e <UART_SetConfig+0x2e6>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a35      	ldr	r2, [pc, #212]	; (8004434 <UART_SetConfig+0x2dc>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d12a      	bne.n	80043b8 <UART_SetConfig+0x260>
 8004362:	4b30      	ldr	r3, [pc, #192]	; (8004424 <UART_SetConfig+0x2cc>)
 8004364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004368:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004370:	d01a      	beq.n	80043a8 <UART_SetConfig+0x250>
 8004372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004376:	d81b      	bhi.n	80043b0 <UART_SetConfig+0x258>
 8004378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800437c:	d00c      	beq.n	8004398 <UART_SetConfig+0x240>
 800437e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004382:	d815      	bhi.n	80043b0 <UART_SetConfig+0x258>
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <UART_SetConfig+0x238>
 8004388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800438c:	d008      	beq.n	80043a0 <UART_SetConfig+0x248>
 800438e:	e00f      	b.n	80043b0 <UART_SetConfig+0x258>
 8004390:	2300      	movs	r3, #0
 8004392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004396:	e052      	b.n	800443e <UART_SetConfig+0x2e6>
 8004398:	2302      	movs	r3, #2
 800439a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439e:	e04e      	b.n	800443e <UART_SetConfig+0x2e6>
 80043a0:	2304      	movs	r3, #4
 80043a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a6:	e04a      	b.n	800443e <UART_SetConfig+0x2e6>
 80043a8:	2308      	movs	r3, #8
 80043aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ae:	e046      	b.n	800443e <UART_SetConfig+0x2e6>
 80043b0:	2310      	movs	r3, #16
 80043b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b6:	e042      	b.n	800443e <UART_SetConfig+0x2e6>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a17      	ldr	r2, [pc, #92]	; (800441c <UART_SetConfig+0x2c4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d13a      	bne.n	8004438 <UART_SetConfig+0x2e0>
 80043c2:	4b18      	ldr	r3, [pc, #96]	; (8004424 <UART_SetConfig+0x2cc>)
 80043c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043d0:	d01a      	beq.n	8004408 <UART_SetConfig+0x2b0>
 80043d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043d6:	d81b      	bhi.n	8004410 <UART_SetConfig+0x2b8>
 80043d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043dc:	d00c      	beq.n	80043f8 <UART_SetConfig+0x2a0>
 80043de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043e2:	d815      	bhi.n	8004410 <UART_SetConfig+0x2b8>
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <UART_SetConfig+0x298>
 80043e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ec:	d008      	beq.n	8004400 <UART_SetConfig+0x2a8>
 80043ee:	e00f      	b.n	8004410 <UART_SetConfig+0x2b8>
 80043f0:	2300      	movs	r3, #0
 80043f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f6:	e022      	b.n	800443e <UART_SetConfig+0x2e6>
 80043f8:	2302      	movs	r3, #2
 80043fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043fe:	e01e      	b.n	800443e <UART_SetConfig+0x2e6>
 8004400:	2304      	movs	r3, #4
 8004402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004406:	e01a      	b.n	800443e <UART_SetConfig+0x2e6>
 8004408:	2308      	movs	r3, #8
 800440a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440e:	e016      	b.n	800443e <UART_SetConfig+0x2e6>
 8004410:	2310      	movs	r3, #16
 8004412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004416:	e012      	b.n	800443e <UART_SetConfig+0x2e6>
 8004418:	efff69f3 	.word	0xefff69f3
 800441c:	40008000 	.word	0x40008000
 8004420:	40013800 	.word	0x40013800
 8004424:	40021000 	.word	0x40021000
 8004428:	40004400 	.word	0x40004400
 800442c:	40004800 	.word	0x40004800
 8004430:	40004c00 	.word	0x40004c00
 8004434:	40005000 	.word	0x40005000
 8004438:	2310      	movs	r3, #16
 800443a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a9f      	ldr	r2, [pc, #636]	; (80046c0 <UART_SetConfig+0x568>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d17a      	bne.n	800453e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004448:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800444c:	2b08      	cmp	r3, #8
 800444e:	d824      	bhi.n	800449a <UART_SetConfig+0x342>
 8004450:	a201      	add	r2, pc, #4	; (adr r2, 8004458 <UART_SetConfig+0x300>)
 8004452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004456:	bf00      	nop
 8004458:	0800447d 	.word	0x0800447d
 800445c:	0800449b 	.word	0x0800449b
 8004460:	08004485 	.word	0x08004485
 8004464:	0800449b 	.word	0x0800449b
 8004468:	0800448b 	.word	0x0800448b
 800446c:	0800449b 	.word	0x0800449b
 8004470:	0800449b 	.word	0x0800449b
 8004474:	0800449b 	.word	0x0800449b
 8004478:	08004493 	.word	0x08004493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800447c:	f7fd ff5c 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 8004480:	61f8      	str	r0, [r7, #28]
        break;
 8004482:	e010      	b.n	80044a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004484:	4b8f      	ldr	r3, [pc, #572]	; (80046c4 <UART_SetConfig+0x56c>)
 8004486:	61fb      	str	r3, [r7, #28]
        break;
 8004488:	e00d      	b.n	80044a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800448a:	f7fd febd 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 800448e:	61f8      	str	r0, [r7, #28]
        break;
 8004490:	e009      	b.n	80044a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004496:	61fb      	str	r3, [r7, #28]
        break;
 8004498:	e005      	b.n	80044a6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800449a:	2300      	movs	r3, #0
 800449c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 80fb 	beq.w	80046a4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	4413      	add	r3, r2
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d305      	bcc.n	80044ca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044c4:	69fa      	ldr	r2, [r7, #28]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d903      	bls.n	80044d2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044d0:	e0e8      	b.n	80046a4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	2200      	movs	r2, #0
 80044d6:	461c      	mov	r4, r3
 80044d8:	4615      	mov	r5, r2
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	022b      	lsls	r3, r5, #8
 80044e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80044e8:	0222      	lsls	r2, r4, #8
 80044ea:	68f9      	ldr	r1, [r7, #12]
 80044ec:	6849      	ldr	r1, [r1, #4]
 80044ee:	0849      	lsrs	r1, r1, #1
 80044f0:	2000      	movs	r0, #0
 80044f2:	4688      	mov	r8, r1
 80044f4:	4681      	mov	r9, r0
 80044f6:	eb12 0a08 	adds.w	sl, r2, r8
 80044fa:	eb43 0b09 	adc.w	fp, r3, r9
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	603b      	str	r3, [r7, #0]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800450c:	4650      	mov	r0, sl
 800450e:	4659      	mov	r1, fp
 8004510:	f7fb febe 	bl	8000290 <__aeabi_uldivmod>
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4613      	mov	r3, r2
 800451a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004522:	d308      	bcc.n	8004536 <UART_SetConfig+0x3de>
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800452a:	d204      	bcs.n	8004536 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	60da      	str	r2, [r3, #12]
 8004534:	e0b6      	b.n	80046a4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800453c:	e0b2      	b.n	80046a4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004546:	d15e      	bne.n	8004606 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004548:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800454c:	2b08      	cmp	r3, #8
 800454e:	d828      	bhi.n	80045a2 <UART_SetConfig+0x44a>
 8004550:	a201      	add	r2, pc, #4	; (adr r2, 8004558 <UART_SetConfig+0x400>)
 8004552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004556:	bf00      	nop
 8004558:	0800457d 	.word	0x0800457d
 800455c:	08004585 	.word	0x08004585
 8004560:	0800458d 	.word	0x0800458d
 8004564:	080045a3 	.word	0x080045a3
 8004568:	08004593 	.word	0x08004593
 800456c:	080045a3 	.word	0x080045a3
 8004570:	080045a3 	.word	0x080045a3
 8004574:	080045a3 	.word	0x080045a3
 8004578:	0800459b 	.word	0x0800459b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800457c:	f7fd fedc 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 8004580:	61f8      	str	r0, [r7, #28]
        break;
 8004582:	e014      	b.n	80045ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004584:	f7fd feee 	bl	8002364 <HAL_RCC_GetPCLK2Freq>
 8004588:	61f8      	str	r0, [r7, #28]
        break;
 800458a:	e010      	b.n	80045ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800458c:	4b4d      	ldr	r3, [pc, #308]	; (80046c4 <UART_SetConfig+0x56c>)
 800458e:	61fb      	str	r3, [r7, #28]
        break;
 8004590:	e00d      	b.n	80045ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004592:	f7fd fe39 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 8004596:	61f8      	str	r0, [r7, #28]
        break;
 8004598:	e009      	b.n	80045ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800459a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800459e:	61fb      	str	r3, [r7, #28]
        break;
 80045a0:	e005      	b.n	80045ae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d077      	beq.n	80046a4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	005a      	lsls	r2, r3, #1
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	085b      	lsrs	r3, r3, #1
 80045be:	441a      	add	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	2b0f      	cmp	r3, #15
 80045ce:	d916      	bls.n	80045fe <UART_SetConfig+0x4a6>
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d6:	d212      	bcs.n	80045fe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	f023 030f 	bic.w	r3, r3, #15
 80045e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	085b      	lsrs	r3, r3, #1
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	8afb      	ldrh	r3, [r7, #22]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	8afa      	ldrh	r2, [r7, #22]
 80045fa:	60da      	str	r2, [r3, #12]
 80045fc:	e052      	b.n	80046a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004604:	e04e      	b.n	80046a4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004606:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800460a:	2b08      	cmp	r3, #8
 800460c:	d827      	bhi.n	800465e <UART_SetConfig+0x506>
 800460e:	a201      	add	r2, pc, #4	; (adr r2, 8004614 <UART_SetConfig+0x4bc>)
 8004610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004614:	08004639 	.word	0x08004639
 8004618:	08004641 	.word	0x08004641
 800461c:	08004649 	.word	0x08004649
 8004620:	0800465f 	.word	0x0800465f
 8004624:	0800464f 	.word	0x0800464f
 8004628:	0800465f 	.word	0x0800465f
 800462c:	0800465f 	.word	0x0800465f
 8004630:	0800465f 	.word	0x0800465f
 8004634:	08004657 	.word	0x08004657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004638:	f7fd fe7e 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 800463c:	61f8      	str	r0, [r7, #28]
        break;
 800463e:	e014      	b.n	800466a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004640:	f7fd fe90 	bl	8002364 <HAL_RCC_GetPCLK2Freq>
 8004644:	61f8      	str	r0, [r7, #28]
        break;
 8004646:	e010      	b.n	800466a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004648:	4b1e      	ldr	r3, [pc, #120]	; (80046c4 <UART_SetConfig+0x56c>)
 800464a:	61fb      	str	r3, [r7, #28]
        break;
 800464c:	e00d      	b.n	800466a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800464e:	f7fd fddb 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 8004652:	61f8      	str	r0, [r7, #28]
        break;
 8004654:	e009      	b.n	800466a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800465a:	61fb      	str	r3, [r7, #28]
        break;
 800465c:	e005      	b.n	800466a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800465e:	2300      	movs	r3, #0
 8004660:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004668:	bf00      	nop
    }

    if (pclk != 0U)
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d019      	beq.n	80046a4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	085a      	lsrs	r2, r3, #1
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	441a      	add	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004682:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	2b0f      	cmp	r3, #15
 8004688:	d909      	bls.n	800469e <UART_SetConfig+0x546>
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004690:	d205      	bcs.n	800469e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	60da      	str	r2, [r3, #12]
 800469c:	e002      	b.n	80046a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80046b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3728      	adds	r7, #40	; 0x28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046be:	bf00      	nop
 80046c0:	40008000 	.word	0x40008000
 80046c4:	00f42400 	.word	0x00f42400

080046c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	f003 0310 	and.w	r3, r3, #16
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	f003 0320 	and.w	r3, r3, #32
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d01a      	beq.n	80047de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047c6:	d10a      	bne.n	80047de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	605a      	str	r2, [r3, #4]
  }
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af02      	add	r7, sp, #8
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800481c:	f7fc fc24 	bl	8001068 <HAL_GetTick>
 8004820:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b08      	cmp	r3, #8
 800482e:	d10e      	bne.n	800484e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004830:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f82d 	bl	800489e <UART_WaitOnFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e023      	b.n	8004896 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b04      	cmp	r3, #4
 800485a:	d10e      	bne.n	800487a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800485c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f817 	bl	800489e <UART_WaitOnFlagUntilTimeout>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e00d      	b.n	8004896 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b09c      	sub	sp, #112	; 0x70
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	60f8      	str	r0, [r7, #12]
 80048a6:	60b9      	str	r1, [r7, #8]
 80048a8:	603b      	str	r3, [r7, #0]
 80048aa:	4613      	mov	r3, r2
 80048ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ae:	e0a5      	b.n	80049fc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b6:	f000 80a1 	beq.w	80049fc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ba:	f7fc fbd5 	bl	8001068 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d302      	bcc.n	80048d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80048ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d13e      	bne.n	800494e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048d8:	e853 3f00 	ldrex	r3, [r3]
 80048dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048e4:	667b      	str	r3, [r7, #100]	; 0x64
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	461a      	mov	r2, r3
 80048ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048f0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048f6:	e841 2300 	strex	r3, r2, [r1]
 80048fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80048fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1e6      	bne.n	80048d0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3308      	adds	r3, #8
 8004908:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800490c:	e853 3f00 	ldrex	r3, [r3]
 8004910:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004914:	f023 0301 	bic.w	r3, r3, #1
 8004918:	663b      	str	r3, [r7, #96]	; 0x60
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	3308      	adds	r3, #8
 8004920:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004922:	64ba      	str	r2, [r7, #72]	; 0x48
 8004924:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004928:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800492a:	e841 2300 	strex	r3, r2, [r1]
 800492e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1e5      	bne.n	8004902 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2220      	movs	r2, #32
 800493a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2220      	movs	r2, #32
 8004940:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e067      	b.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	d04f      	beq.n	80049fc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004966:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800496a:	d147      	bne.n	80049fc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004974:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497e:	e853 3f00 	ldrex	r3, [r3]
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800498a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	461a      	mov	r2, r3
 8004992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004994:	637b      	str	r3, [r7, #52]	; 0x34
 8004996:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004998:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800499a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800499c:	e841 2300 	strex	r3, r2, [r1]
 80049a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e6      	bne.n	8004976 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3308      	adds	r3, #8
 80049ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	e853 3f00 	ldrex	r3, [r3]
 80049b6:	613b      	str	r3, [r7, #16]
   return(result);
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f023 0301 	bic.w	r3, r3, #1
 80049be:	66bb      	str	r3, [r7, #104]	; 0x68
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3308      	adds	r3, #8
 80049c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049c8:	623a      	str	r2, [r7, #32]
 80049ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	69f9      	ldr	r1, [r7, #28]
 80049ce:	6a3a      	ldr	r2, [r7, #32]
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e5      	bne.n	80049a8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2220      	movs	r2, #32
 80049e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2220      	movs	r2, #32
 80049e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e010      	b.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	69da      	ldr	r2, [r3, #28]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	4013      	ands	r3, r2
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	bf0c      	ite	eq
 8004a0c:	2301      	moveq	r3, #1
 8004a0e:	2300      	movne	r3, #0
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	461a      	mov	r2, r3
 8004a14:	79fb      	ldrb	r3, [r7, #7]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	f43f af4a 	beq.w	80048b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3770      	adds	r7, #112	; 0x70
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b097      	sub	sp, #92	; 0x5c
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	4613      	mov	r3, r2
 8004a34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	88fa      	ldrh	r2, [r7, #6]
 8004a40:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	88fa      	ldrh	r2, [r7, #6]
 8004a48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5a:	d10e      	bne.n	8004a7a <UART_Start_Receive_IT+0x52>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d105      	bne.n	8004a70 <UART_Start_Receive_IT+0x48>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004a6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a6e:	e02d      	b.n	8004acc <UART_Start_Receive_IT+0xa4>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	22ff      	movs	r2, #255	; 0xff
 8004a74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a78:	e028      	b.n	8004acc <UART_Start_Receive_IT+0xa4>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10d      	bne.n	8004a9e <UART_Start_Receive_IT+0x76>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d104      	bne.n	8004a94 <UART_Start_Receive_IT+0x6c>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	22ff      	movs	r2, #255	; 0xff
 8004a8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a92:	e01b      	b.n	8004acc <UART_Start_Receive_IT+0xa4>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	227f      	movs	r2, #127	; 0x7f
 8004a98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a9c:	e016      	b.n	8004acc <UART_Start_Receive_IT+0xa4>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aa6:	d10d      	bne.n	8004ac4 <UART_Start_Receive_IT+0x9c>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d104      	bne.n	8004aba <UART_Start_Receive_IT+0x92>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	227f      	movs	r2, #127	; 0x7f
 8004ab4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ab8:	e008      	b.n	8004acc <UART_Start_Receive_IT+0xa4>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	223f      	movs	r2, #63	; 0x3f
 8004abe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ac2:	e003      	b.n	8004acc <UART_Start_Receive_IT+0xa4>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2222      	movs	r2, #34	; 0x22
 8004ad8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3308      	adds	r3, #8
 8004ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	657b      	str	r3, [r7, #84]	; 0x54
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3308      	adds	r3, #8
 8004af8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004afa:	64ba      	str	r2, [r7, #72]	; 0x48
 8004afc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b02:	e841 2300 	strex	r3, r2, [r1]
 8004b06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1e5      	bne.n	8004ada <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b16:	d107      	bne.n	8004b28 <UART_Start_Receive_IT+0x100>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d103      	bne.n	8004b28 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4a24      	ldr	r2, [pc, #144]	; (8004bb4 <UART_Start_Receive_IT+0x18c>)
 8004b24:	665a      	str	r2, [r3, #100]	; 0x64
 8004b26:	e002      	b.n	8004b2e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4a23      	ldr	r2, [pc, #140]	; (8004bb8 <UART_Start_Receive_IT+0x190>)
 8004b2c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d019      	beq.n	8004b72 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b46:	e853 3f00 	ldrex	r3, [r3]
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004b52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b64:	e841 2300 	strex	r3, r2, [r1]
 8004b68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1e6      	bne.n	8004b3e <UART_Start_Receive_IT+0x116>
 8004b70:	e018      	b.n	8004ba4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	e853 3f00 	ldrex	r3, [r3]
 8004b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f043 0320 	orr.w	r3, r3, #32
 8004b86:	653b      	str	r3, [r7, #80]	; 0x50
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b90:	623b      	str	r3, [r7, #32]
 8004b92:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b94:	69f9      	ldr	r1, [r7, #28]
 8004b96:	6a3a      	ldr	r2, [r7, #32]
 8004b98:	e841 2300 	strex	r3, r2, [r1]
 8004b9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1e6      	bne.n	8004b72 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	375c      	adds	r7, #92	; 0x5c
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	08004eaf 	.word	0x08004eaf
 8004bb8:	08004d4f 	.word	0x08004d4f

08004bbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b095      	sub	sp, #84	; 0x54
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bcc:	e853 3f00 	ldrex	r3, [r3]
 8004bd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be2:	643b      	str	r3, [r7, #64]	; 0x40
 8004be4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004be8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bea:	e841 2300 	strex	r3, r2, [r1]
 8004bee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1e6      	bne.n	8004bc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3308      	adds	r3, #8
 8004bfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	e853 3f00 	ldrex	r3, [r3]
 8004c04:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	f023 0301 	bic.w	r3, r3, #1
 8004c0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3308      	adds	r3, #8
 8004c14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c1e:	e841 2300 	strex	r3, r2, [r1]
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1e5      	bne.n	8004bf6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d118      	bne.n	8004c64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	e853 3f00 	ldrex	r3, [r3]
 8004c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f023 0310 	bic.w	r3, r3, #16
 8004c46:	647b      	str	r3, [r7, #68]	; 0x44
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c50:	61bb      	str	r3, [r7, #24]
 8004c52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	6979      	ldr	r1, [r7, #20]
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	e841 2300 	strex	r3, r2, [r1]
 8004c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1e6      	bne.n	8004c32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2220      	movs	r2, #32
 8004c68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004c76:	bf00      	nop
 8004c78:	3754      	adds	r7, #84	; 0x54
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b084      	sub	sp, #16
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f7ff fa39 	bl	8004118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ca6:	bf00      	nop
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b084      	sub	sp, #16
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	220f      	movs	r2, #15
 8004cca:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	8b1b      	ldrh	r3, [r3, #24]
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f042 0208 	orr.w	r2, r2, #8
 8004cdc:	b292      	uxth	r2, r2
 8004cde:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f7ff fa1d 	bl	800412c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cf2:	bf00      	nop
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b088      	sub	sp, #32
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	e853 3f00 	ldrex	r3, [r3]
 8004d0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d16:	61fb      	str	r3, [r7, #28]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	61bb      	str	r3, [r7, #24]
 8004d22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d24:	6979      	ldr	r1, [r7, #20]
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	e841 2300 	strex	r3, r2, [r1]
 8004d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1e6      	bne.n	8004d02 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2220      	movs	r2, #32
 8004d38:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7ff f9df 	bl	8004104 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d46:	bf00      	nop
 8004d48:	3720      	adds	r7, #32
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b096      	sub	sp, #88	; 0x58
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d5c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d64:	2b22      	cmp	r3, #34	; 0x22
 8004d66:	f040 8094 	bne.w	8004e92 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004d70:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d74:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004d78:	b2d9      	uxtb	r1, r3
 8004d7a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d84:	400a      	ands	r2, r1
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d179      	bne.n	8004ea6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dba:	e853 3f00 	ldrex	r3, [r3]
 8004dbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dc6:	653b      	str	r3, [r7, #80]	; 0x50
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	461a      	mov	r2, r3
 8004dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8004dd2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dd8:	e841 2300 	strex	r3, r2, [r1]
 8004ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1e6      	bne.n	8004db2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3308      	adds	r3, #8
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	e853 3f00 	ldrex	r3, [r3]
 8004df2:	623b      	str	r3, [r7, #32]
   return(result);
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	f023 0301 	bic.w	r3, r3, #1
 8004dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3308      	adds	r3, #8
 8004e02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e04:	633a      	str	r2, [r7, #48]	; 0x30
 8004e06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e0c:	e841 2300 	strex	r3, r2, [r1]
 8004e10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1e5      	bne.n	8004de4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d12e      	bne.n	8004e8a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	e853 3f00 	ldrex	r3, [r3]
 8004e3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 0310 	bic.w	r3, r3, #16
 8004e46:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e50:	61fb      	str	r3, [r7, #28]
 8004e52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e54:	69b9      	ldr	r1, [r7, #24]
 8004e56:	69fa      	ldr	r2, [r7, #28]
 8004e58:	e841 2300 	strex	r3, r2, [r1]
 8004e5c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1e6      	bne.n	8004e32 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	2b10      	cmp	r3, #16
 8004e70:	d103      	bne.n	8004e7a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2210      	movs	r2, #16
 8004e78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e80:	4619      	mov	r1, r3
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7ff f95c 	bl	8004140 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e88:	e00d      	b.n	8004ea6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7fb fee0 	bl	8000c50 <HAL_UART_RxCpltCallback>
}
 8004e90:	e009      	b.n	8004ea6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	8b1b      	ldrh	r3, [r3, #24]
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0208 	orr.w	r2, r2, #8
 8004ea2:	b292      	uxth	r2, r2
 8004ea4:	831a      	strh	r2, [r3, #24]
}
 8004ea6:	bf00      	nop
 8004ea8:	3758      	adds	r7, #88	; 0x58
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b096      	sub	sp, #88	; 0x58
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ebc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ec4:	2b22      	cmp	r3, #34	; 0x22
 8004ec6:	f040 8094 	bne.w	8004ff2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ed0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004eda:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004ede:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ee8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eee:	1c9a      	adds	r2, r3, #2
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d179      	bne.n	8005006 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1a:	e853 3f00 	ldrex	r3, [r3]
 8004f1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f30:	643b      	str	r3, [r7, #64]	; 0x40
 8004f32:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f38:	e841 2300 	strex	r3, r2, [r1]
 8004f3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1e6      	bne.n	8004f12 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	3308      	adds	r3, #8
 8004f4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	e853 3f00 	ldrex	r3, [r3]
 8004f52:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	f023 0301 	bic.w	r3, r3, #1
 8004f5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3308      	adds	r3, #8
 8004f62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f6c:	e841 2300 	strex	r3, r2, [r1]
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1e5      	bne.n	8004f44 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d12e      	bne.n	8004fea <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f023 0310 	bic.w	r3, r3, #16
 8004fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	461a      	mov	r2, r3
 8004fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fb0:	61bb      	str	r3, [r7, #24]
 8004fb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	6979      	ldr	r1, [r7, #20]
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e6      	bne.n	8004f92 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	f003 0310 	and.w	r3, r3, #16
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d103      	bne.n	8004fda <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2210      	movs	r2, #16
 8004fd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7ff f8ac 	bl	8004140 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fe8:	e00d      	b.n	8005006 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fb fe30 	bl	8000c50 <HAL_UART_RxCpltCallback>
}
 8004ff0:	e009      	b.n	8005006 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	8b1b      	ldrh	r3, [r3, #24]
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0208 	orr.w	r2, r2, #8
 8005002:	b292      	uxth	r2, r2
 8005004:	831a      	strh	r2, [r3, #24]
}
 8005006:	bf00      	nop
 8005008:	3758      	adds	r7, #88	; 0x58
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
	...

08005024 <__errno>:
 8005024:	4b01      	ldr	r3, [pc, #4]	; (800502c <__errno+0x8>)
 8005026:	6818      	ldr	r0, [r3, #0]
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	2000000c 	.word	0x2000000c

08005030 <__libc_init_array>:
 8005030:	b570      	push	{r4, r5, r6, lr}
 8005032:	4d0d      	ldr	r5, [pc, #52]	; (8005068 <__libc_init_array+0x38>)
 8005034:	4c0d      	ldr	r4, [pc, #52]	; (800506c <__libc_init_array+0x3c>)
 8005036:	1b64      	subs	r4, r4, r5
 8005038:	10a4      	asrs	r4, r4, #2
 800503a:	2600      	movs	r6, #0
 800503c:	42a6      	cmp	r6, r4
 800503e:	d109      	bne.n	8005054 <__libc_init_array+0x24>
 8005040:	4d0b      	ldr	r5, [pc, #44]	; (8005070 <__libc_init_array+0x40>)
 8005042:	4c0c      	ldr	r4, [pc, #48]	; (8005074 <__libc_init_array+0x44>)
 8005044:	f000 fc8e 	bl	8005964 <_init>
 8005048:	1b64      	subs	r4, r4, r5
 800504a:	10a4      	asrs	r4, r4, #2
 800504c:	2600      	movs	r6, #0
 800504e:	42a6      	cmp	r6, r4
 8005050:	d105      	bne.n	800505e <__libc_init_array+0x2e>
 8005052:	bd70      	pop	{r4, r5, r6, pc}
 8005054:	f855 3b04 	ldr.w	r3, [r5], #4
 8005058:	4798      	blx	r3
 800505a:	3601      	adds	r6, #1
 800505c:	e7ee      	b.n	800503c <__libc_init_array+0xc>
 800505e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005062:	4798      	blx	r3
 8005064:	3601      	adds	r6, #1
 8005066:	e7f2      	b.n	800504e <__libc_init_array+0x1e>
 8005068:	08005aa4 	.word	0x08005aa4
 800506c:	08005aa4 	.word	0x08005aa4
 8005070:	08005aa4 	.word	0x08005aa4
 8005074:	08005aa8 	.word	0x08005aa8

08005078 <memset>:
 8005078:	4402      	add	r2, r0
 800507a:	4603      	mov	r3, r0
 800507c:	4293      	cmp	r3, r2
 800507e:	d100      	bne.n	8005082 <memset+0xa>
 8005080:	4770      	bx	lr
 8005082:	f803 1b01 	strb.w	r1, [r3], #1
 8005086:	e7f9      	b.n	800507c <memset+0x4>

08005088 <siprintf>:
 8005088:	b40e      	push	{r1, r2, r3}
 800508a:	b500      	push	{lr}
 800508c:	b09c      	sub	sp, #112	; 0x70
 800508e:	ab1d      	add	r3, sp, #116	; 0x74
 8005090:	9002      	str	r0, [sp, #8]
 8005092:	9006      	str	r0, [sp, #24]
 8005094:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005098:	4809      	ldr	r0, [pc, #36]	; (80050c0 <siprintf+0x38>)
 800509a:	9107      	str	r1, [sp, #28]
 800509c:	9104      	str	r1, [sp, #16]
 800509e:	4909      	ldr	r1, [pc, #36]	; (80050c4 <siprintf+0x3c>)
 80050a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80050a4:	9105      	str	r1, [sp, #20]
 80050a6:	6800      	ldr	r0, [r0, #0]
 80050a8:	9301      	str	r3, [sp, #4]
 80050aa:	a902      	add	r1, sp, #8
 80050ac:	f000 f868 	bl	8005180 <_svfiprintf_r>
 80050b0:	9b02      	ldr	r3, [sp, #8]
 80050b2:	2200      	movs	r2, #0
 80050b4:	701a      	strb	r2, [r3, #0]
 80050b6:	b01c      	add	sp, #112	; 0x70
 80050b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80050bc:	b003      	add	sp, #12
 80050be:	4770      	bx	lr
 80050c0:	2000000c 	.word	0x2000000c
 80050c4:	ffff0208 	.word	0xffff0208

080050c8 <__ssputs_r>:
 80050c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050cc:	688e      	ldr	r6, [r1, #8]
 80050ce:	429e      	cmp	r6, r3
 80050d0:	4682      	mov	sl, r0
 80050d2:	460c      	mov	r4, r1
 80050d4:	4690      	mov	r8, r2
 80050d6:	461f      	mov	r7, r3
 80050d8:	d838      	bhi.n	800514c <__ssputs_r+0x84>
 80050da:	898a      	ldrh	r2, [r1, #12]
 80050dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050e0:	d032      	beq.n	8005148 <__ssputs_r+0x80>
 80050e2:	6825      	ldr	r5, [r4, #0]
 80050e4:	6909      	ldr	r1, [r1, #16]
 80050e6:	eba5 0901 	sub.w	r9, r5, r1
 80050ea:	6965      	ldr	r5, [r4, #20]
 80050ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050f4:	3301      	adds	r3, #1
 80050f6:	444b      	add	r3, r9
 80050f8:	106d      	asrs	r5, r5, #1
 80050fa:	429d      	cmp	r5, r3
 80050fc:	bf38      	it	cc
 80050fe:	461d      	movcc	r5, r3
 8005100:	0553      	lsls	r3, r2, #21
 8005102:	d531      	bpl.n	8005168 <__ssputs_r+0xa0>
 8005104:	4629      	mov	r1, r5
 8005106:	f000 fb63 	bl	80057d0 <_malloc_r>
 800510a:	4606      	mov	r6, r0
 800510c:	b950      	cbnz	r0, 8005124 <__ssputs_r+0x5c>
 800510e:	230c      	movs	r3, #12
 8005110:	f8ca 3000 	str.w	r3, [sl]
 8005114:	89a3      	ldrh	r3, [r4, #12]
 8005116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800511a:	81a3      	strh	r3, [r4, #12]
 800511c:	f04f 30ff 	mov.w	r0, #4294967295
 8005120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005124:	6921      	ldr	r1, [r4, #16]
 8005126:	464a      	mov	r2, r9
 8005128:	f000 fabe 	bl	80056a8 <memcpy>
 800512c:	89a3      	ldrh	r3, [r4, #12]
 800512e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005136:	81a3      	strh	r3, [r4, #12]
 8005138:	6126      	str	r6, [r4, #16]
 800513a:	6165      	str	r5, [r4, #20]
 800513c:	444e      	add	r6, r9
 800513e:	eba5 0509 	sub.w	r5, r5, r9
 8005142:	6026      	str	r6, [r4, #0]
 8005144:	60a5      	str	r5, [r4, #8]
 8005146:	463e      	mov	r6, r7
 8005148:	42be      	cmp	r6, r7
 800514a:	d900      	bls.n	800514e <__ssputs_r+0x86>
 800514c:	463e      	mov	r6, r7
 800514e:	6820      	ldr	r0, [r4, #0]
 8005150:	4632      	mov	r2, r6
 8005152:	4641      	mov	r1, r8
 8005154:	f000 fab6 	bl	80056c4 <memmove>
 8005158:	68a3      	ldr	r3, [r4, #8]
 800515a:	1b9b      	subs	r3, r3, r6
 800515c:	60a3      	str	r3, [r4, #8]
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	4433      	add	r3, r6
 8005162:	6023      	str	r3, [r4, #0]
 8005164:	2000      	movs	r0, #0
 8005166:	e7db      	b.n	8005120 <__ssputs_r+0x58>
 8005168:	462a      	mov	r2, r5
 800516a:	f000 fba5 	bl	80058b8 <_realloc_r>
 800516e:	4606      	mov	r6, r0
 8005170:	2800      	cmp	r0, #0
 8005172:	d1e1      	bne.n	8005138 <__ssputs_r+0x70>
 8005174:	6921      	ldr	r1, [r4, #16]
 8005176:	4650      	mov	r0, sl
 8005178:	f000 fabe 	bl	80056f8 <_free_r>
 800517c:	e7c7      	b.n	800510e <__ssputs_r+0x46>
	...

08005180 <_svfiprintf_r>:
 8005180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005184:	4698      	mov	r8, r3
 8005186:	898b      	ldrh	r3, [r1, #12]
 8005188:	061b      	lsls	r3, r3, #24
 800518a:	b09d      	sub	sp, #116	; 0x74
 800518c:	4607      	mov	r7, r0
 800518e:	460d      	mov	r5, r1
 8005190:	4614      	mov	r4, r2
 8005192:	d50e      	bpl.n	80051b2 <_svfiprintf_r+0x32>
 8005194:	690b      	ldr	r3, [r1, #16]
 8005196:	b963      	cbnz	r3, 80051b2 <_svfiprintf_r+0x32>
 8005198:	2140      	movs	r1, #64	; 0x40
 800519a:	f000 fb19 	bl	80057d0 <_malloc_r>
 800519e:	6028      	str	r0, [r5, #0]
 80051a0:	6128      	str	r0, [r5, #16]
 80051a2:	b920      	cbnz	r0, 80051ae <_svfiprintf_r+0x2e>
 80051a4:	230c      	movs	r3, #12
 80051a6:	603b      	str	r3, [r7, #0]
 80051a8:	f04f 30ff 	mov.w	r0, #4294967295
 80051ac:	e0d1      	b.n	8005352 <_svfiprintf_r+0x1d2>
 80051ae:	2340      	movs	r3, #64	; 0x40
 80051b0:	616b      	str	r3, [r5, #20]
 80051b2:	2300      	movs	r3, #0
 80051b4:	9309      	str	r3, [sp, #36]	; 0x24
 80051b6:	2320      	movs	r3, #32
 80051b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80051c0:	2330      	movs	r3, #48	; 0x30
 80051c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800536c <_svfiprintf_r+0x1ec>
 80051c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051ca:	f04f 0901 	mov.w	r9, #1
 80051ce:	4623      	mov	r3, r4
 80051d0:	469a      	mov	sl, r3
 80051d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051d6:	b10a      	cbz	r2, 80051dc <_svfiprintf_r+0x5c>
 80051d8:	2a25      	cmp	r2, #37	; 0x25
 80051da:	d1f9      	bne.n	80051d0 <_svfiprintf_r+0x50>
 80051dc:	ebba 0b04 	subs.w	fp, sl, r4
 80051e0:	d00b      	beq.n	80051fa <_svfiprintf_r+0x7a>
 80051e2:	465b      	mov	r3, fp
 80051e4:	4622      	mov	r2, r4
 80051e6:	4629      	mov	r1, r5
 80051e8:	4638      	mov	r0, r7
 80051ea:	f7ff ff6d 	bl	80050c8 <__ssputs_r>
 80051ee:	3001      	adds	r0, #1
 80051f0:	f000 80aa 	beq.w	8005348 <_svfiprintf_r+0x1c8>
 80051f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051f6:	445a      	add	r2, fp
 80051f8:	9209      	str	r2, [sp, #36]	; 0x24
 80051fa:	f89a 3000 	ldrb.w	r3, [sl]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 80a2 	beq.w	8005348 <_svfiprintf_r+0x1c8>
 8005204:	2300      	movs	r3, #0
 8005206:	f04f 32ff 	mov.w	r2, #4294967295
 800520a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800520e:	f10a 0a01 	add.w	sl, sl, #1
 8005212:	9304      	str	r3, [sp, #16]
 8005214:	9307      	str	r3, [sp, #28]
 8005216:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800521a:	931a      	str	r3, [sp, #104]	; 0x68
 800521c:	4654      	mov	r4, sl
 800521e:	2205      	movs	r2, #5
 8005220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005224:	4851      	ldr	r0, [pc, #324]	; (800536c <_svfiprintf_r+0x1ec>)
 8005226:	f7fa ffe3 	bl	80001f0 <memchr>
 800522a:	9a04      	ldr	r2, [sp, #16]
 800522c:	b9d8      	cbnz	r0, 8005266 <_svfiprintf_r+0xe6>
 800522e:	06d0      	lsls	r0, r2, #27
 8005230:	bf44      	itt	mi
 8005232:	2320      	movmi	r3, #32
 8005234:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005238:	0711      	lsls	r1, r2, #28
 800523a:	bf44      	itt	mi
 800523c:	232b      	movmi	r3, #43	; 0x2b
 800523e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005242:	f89a 3000 	ldrb.w	r3, [sl]
 8005246:	2b2a      	cmp	r3, #42	; 0x2a
 8005248:	d015      	beq.n	8005276 <_svfiprintf_r+0xf6>
 800524a:	9a07      	ldr	r2, [sp, #28]
 800524c:	4654      	mov	r4, sl
 800524e:	2000      	movs	r0, #0
 8005250:	f04f 0c0a 	mov.w	ip, #10
 8005254:	4621      	mov	r1, r4
 8005256:	f811 3b01 	ldrb.w	r3, [r1], #1
 800525a:	3b30      	subs	r3, #48	; 0x30
 800525c:	2b09      	cmp	r3, #9
 800525e:	d94e      	bls.n	80052fe <_svfiprintf_r+0x17e>
 8005260:	b1b0      	cbz	r0, 8005290 <_svfiprintf_r+0x110>
 8005262:	9207      	str	r2, [sp, #28]
 8005264:	e014      	b.n	8005290 <_svfiprintf_r+0x110>
 8005266:	eba0 0308 	sub.w	r3, r0, r8
 800526a:	fa09 f303 	lsl.w	r3, r9, r3
 800526e:	4313      	orrs	r3, r2
 8005270:	9304      	str	r3, [sp, #16]
 8005272:	46a2      	mov	sl, r4
 8005274:	e7d2      	b.n	800521c <_svfiprintf_r+0x9c>
 8005276:	9b03      	ldr	r3, [sp, #12]
 8005278:	1d19      	adds	r1, r3, #4
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	9103      	str	r1, [sp, #12]
 800527e:	2b00      	cmp	r3, #0
 8005280:	bfbb      	ittet	lt
 8005282:	425b      	neglt	r3, r3
 8005284:	f042 0202 	orrlt.w	r2, r2, #2
 8005288:	9307      	strge	r3, [sp, #28]
 800528a:	9307      	strlt	r3, [sp, #28]
 800528c:	bfb8      	it	lt
 800528e:	9204      	strlt	r2, [sp, #16]
 8005290:	7823      	ldrb	r3, [r4, #0]
 8005292:	2b2e      	cmp	r3, #46	; 0x2e
 8005294:	d10c      	bne.n	80052b0 <_svfiprintf_r+0x130>
 8005296:	7863      	ldrb	r3, [r4, #1]
 8005298:	2b2a      	cmp	r3, #42	; 0x2a
 800529a:	d135      	bne.n	8005308 <_svfiprintf_r+0x188>
 800529c:	9b03      	ldr	r3, [sp, #12]
 800529e:	1d1a      	adds	r2, r3, #4
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	9203      	str	r2, [sp, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	bfb8      	it	lt
 80052a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80052ac:	3402      	adds	r4, #2
 80052ae:	9305      	str	r3, [sp, #20]
 80052b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800537c <_svfiprintf_r+0x1fc>
 80052b4:	7821      	ldrb	r1, [r4, #0]
 80052b6:	2203      	movs	r2, #3
 80052b8:	4650      	mov	r0, sl
 80052ba:	f7fa ff99 	bl	80001f0 <memchr>
 80052be:	b140      	cbz	r0, 80052d2 <_svfiprintf_r+0x152>
 80052c0:	2340      	movs	r3, #64	; 0x40
 80052c2:	eba0 000a 	sub.w	r0, r0, sl
 80052c6:	fa03 f000 	lsl.w	r0, r3, r0
 80052ca:	9b04      	ldr	r3, [sp, #16]
 80052cc:	4303      	orrs	r3, r0
 80052ce:	3401      	adds	r4, #1
 80052d0:	9304      	str	r3, [sp, #16]
 80052d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052d6:	4826      	ldr	r0, [pc, #152]	; (8005370 <_svfiprintf_r+0x1f0>)
 80052d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052dc:	2206      	movs	r2, #6
 80052de:	f7fa ff87 	bl	80001f0 <memchr>
 80052e2:	2800      	cmp	r0, #0
 80052e4:	d038      	beq.n	8005358 <_svfiprintf_r+0x1d8>
 80052e6:	4b23      	ldr	r3, [pc, #140]	; (8005374 <_svfiprintf_r+0x1f4>)
 80052e8:	bb1b      	cbnz	r3, 8005332 <_svfiprintf_r+0x1b2>
 80052ea:	9b03      	ldr	r3, [sp, #12]
 80052ec:	3307      	adds	r3, #7
 80052ee:	f023 0307 	bic.w	r3, r3, #7
 80052f2:	3308      	adds	r3, #8
 80052f4:	9303      	str	r3, [sp, #12]
 80052f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052f8:	4433      	add	r3, r6
 80052fa:	9309      	str	r3, [sp, #36]	; 0x24
 80052fc:	e767      	b.n	80051ce <_svfiprintf_r+0x4e>
 80052fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005302:	460c      	mov	r4, r1
 8005304:	2001      	movs	r0, #1
 8005306:	e7a5      	b.n	8005254 <_svfiprintf_r+0xd4>
 8005308:	2300      	movs	r3, #0
 800530a:	3401      	adds	r4, #1
 800530c:	9305      	str	r3, [sp, #20]
 800530e:	4619      	mov	r1, r3
 8005310:	f04f 0c0a 	mov.w	ip, #10
 8005314:	4620      	mov	r0, r4
 8005316:	f810 2b01 	ldrb.w	r2, [r0], #1
 800531a:	3a30      	subs	r2, #48	; 0x30
 800531c:	2a09      	cmp	r2, #9
 800531e:	d903      	bls.n	8005328 <_svfiprintf_r+0x1a8>
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0c5      	beq.n	80052b0 <_svfiprintf_r+0x130>
 8005324:	9105      	str	r1, [sp, #20]
 8005326:	e7c3      	b.n	80052b0 <_svfiprintf_r+0x130>
 8005328:	fb0c 2101 	mla	r1, ip, r1, r2
 800532c:	4604      	mov	r4, r0
 800532e:	2301      	movs	r3, #1
 8005330:	e7f0      	b.n	8005314 <_svfiprintf_r+0x194>
 8005332:	ab03      	add	r3, sp, #12
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	462a      	mov	r2, r5
 8005338:	4b0f      	ldr	r3, [pc, #60]	; (8005378 <_svfiprintf_r+0x1f8>)
 800533a:	a904      	add	r1, sp, #16
 800533c:	4638      	mov	r0, r7
 800533e:	f3af 8000 	nop.w
 8005342:	1c42      	adds	r2, r0, #1
 8005344:	4606      	mov	r6, r0
 8005346:	d1d6      	bne.n	80052f6 <_svfiprintf_r+0x176>
 8005348:	89ab      	ldrh	r3, [r5, #12]
 800534a:	065b      	lsls	r3, r3, #25
 800534c:	f53f af2c 	bmi.w	80051a8 <_svfiprintf_r+0x28>
 8005350:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005352:	b01d      	add	sp, #116	; 0x74
 8005354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005358:	ab03      	add	r3, sp, #12
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	462a      	mov	r2, r5
 800535e:	4b06      	ldr	r3, [pc, #24]	; (8005378 <_svfiprintf_r+0x1f8>)
 8005360:	a904      	add	r1, sp, #16
 8005362:	4638      	mov	r0, r7
 8005364:	f000 f87a 	bl	800545c <_printf_i>
 8005368:	e7eb      	b.n	8005342 <_svfiprintf_r+0x1c2>
 800536a:	bf00      	nop
 800536c:	08005a68 	.word	0x08005a68
 8005370:	08005a72 	.word	0x08005a72
 8005374:	00000000 	.word	0x00000000
 8005378:	080050c9 	.word	0x080050c9
 800537c:	08005a6e 	.word	0x08005a6e

08005380 <_printf_common>:
 8005380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005384:	4616      	mov	r6, r2
 8005386:	4699      	mov	r9, r3
 8005388:	688a      	ldr	r2, [r1, #8]
 800538a:	690b      	ldr	r3, [r1, #16]
 800538c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005390:	4293      	cmp	r3, r2
 8005392:	bfb8      	it	lt
 8005394:	4613      	movlt	r3, r2
 8005396:	6033      	str	r3, [r6, #0]
 8005398:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800539c:	4607      	mov	r7, r0
 800539e:	460c      	mov	r4, r1
 80053a0:	b10a      	cbz	r2, 80053a6 <_printf_common+0x26>
 80053a2:	3301      	adds	r3, #1
 80053a4:	6033      	str	r3, [r6, #0]
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	0699      	lsls	r1, r3, #26
 80053aa:	bf42      	ittt	mi
 80053ac:	6833      	ldrmi	r3, [r6, #0]
 80053ae:	3302      	addmi	r3, #2
 80053b0:	6033      	strmi	r3, [r6, #0]
 80053b2:	6825      	ldr	r5, [r4, #0]
 80053b4:	f015 0506 	ands.w	r5, r5, #6
 80053b8:	d106      	bne.n	80053c8 <_printf_common+0x48>
 80053ba:	f104 0a19 	add.w	sl, r4, #25
 80053be:	68e3      	ldr	r3, [r4, #12]
 80053c0:	6832      	ldr	r2, [r6, #0]
 80053c2:	1a9b      	subs	r3, r3, r2
 80053c4:	42ab      	cmp	r3, r5
 80053c6:	dc26      	bgt.n	8005416 <_printf_common+0x96>
 80053c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053cc:	1e13      	subs	r3, r2, #0
 80053ce:	6822      	ldr	r2, [r4, #0]
 80053d0:	bf18      	it	ne
 80053d2:	2301      	movne	r3, #1
 80053d4:	0692      	lsls	r2, r2, #26
 80053d6:	d42b      	bmi.n	8005430 <_printf_common+0xb0>
 80053d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053dc:	4649      	mov	r1, r9
 80053de:	4638      	mov	r0, r7
 80053e0:	47c0      	blx	r8
 80053e2:	3001      	adds	r0, #1
 80053e4:	d01e      	beq.n	8005424 <_printf_common+0xa4>
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	68e5      	ldr	r5, [r4, #12]
 80053ea:	6832      	ldr	r2, [r6, #0]
 80053ec:	f003 0306 	and.w	r3, r3, #6
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	bf08      	it	eq
 80053f4:	1aad      	subeq	r5, r5, r2
 80053f6:	68a3      	ldr	r3, [r4, #8]
 80053f8:	6922      	ldr	r2, [r4, #16]
 80053fa:	bf0c      	ite	eq
 80053fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005400:	2500      	movne	r5, #0
 8005402:	4293      	cmp	r3, r2
 8005404:	bfc4      	itt	gt
 8005406:	1a9b      	subgt	r3, r3, r2
 8005408:	18ed      	addgt	r5, r5, r3
 800540a:	2600      	movs	r6, #0
 800540c:	341a      	adds	r4, #26
 800540e:	42b5      	cmp	r5, r6
 8005410:	d11a      	bne.n	8005448 <_printf_common+0xc8>
 8005412:	2000      	movs	r0, #0
 8005414:	e008      	b.n	8005428 <_printf_common+0xa8>
 8005416:	2301      	movs	r3, #1
 8005418:	4652      	mov	r2, sl
 800541a:	4649      	mov	r1, r9
 800541c:	4638      	mov	r0, r7
 800541e:	47c0      	blx	r8
 8005420:	3001      	adds	r0, #1
 8005422:	d103      	bne.n	800542c <_printf_common+0xac>
 8005424:	f04f 30ff 	mov.w	r0, #4294967295
 8005428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800542c:	3501      	adds	r5, #1
 800542e:	e7c6      	b.n	80053be <_printf_common+0x3e>
 8005430:	18e1      	adds	r1, r4, r3
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	2030      	movs	r0, #48	; 0x30
 8005436:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800543a:	4422      	add	r2, r4
 800543c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005440:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005444:	3302      	adds	r3, #2
 8005446:	e7c7      	b.n	80053d8 <_printf_common+0x58>
 8005448:	2301      	movs	r3, #1
 800544a:	4622      	mov	r2, r4
 800544c:	4649      	mov	r1, r9
 800544e:	4638      	mov	r0, r7
 8005450:	47c0      	blx	r8
 8005452:	3001      	adds	r0, #1
 8005454:	d0e6      	beq.n	8005424 <_printf_common+0xa4>
 8005456:	3601      	adds	r6, #1
 8005458:	e7d9      	b.n	800540e <_printf_common+0x8e>
	...

0800545c <_printf_i>:
 800545c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005460:	7e0f      	ldrb	r7, [r1, #24]
 8005462:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005464:	2f78      	cmp	r7, #120	; 0x78
 8005466:	4691      	mov	r9, r2
 8005468:	4680      	mov	r8, r0
 800546a:	460c      	mov	r4, r1
 800546c:	469a      	mov	sl, r3
 800546e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005472:	d807      	bhi.n	8005484 <_printf_i+0x28>
 8005474:	2f62      	cmp	r7, #98	; 0x62
 8005476:	d80a      	bhi.n	800548e <_printf_i+0x32>
 8005478:	2f00      	cmp	r7, #0
 800547a:	f000 80d8 	beq.w	800562e <_printf_i+0x1d2>
 800547e:	2f58      	cmp	r7, #88	; 0x58
 8005480:	f000 80a3 	beq.w	80055ca <_printf_i+0x16e>
 8005484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005488:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800548c:	e03a      	b.n	8005504 <_printf_i+0xa8>
 800548e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005492:	2b15      	cmp	r3, #21
 8005494:	d8f6      	bhi.n	8005484 <_printf_i+0x28>
 8005496:	a101      	add	r1, pc, #4	; (adr r1, 800549c <_printf_i+0x40>)
 8005498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800549c:	080054f5 	.word	0x080054f5
 80054a0:	08005509 	.word	0x08005509
 80054a4:	08005485 	.word	0x08005485
 80054a8:	08005485 	.word	0x08005485
 80054ac:	08005485 	.word	0x08005485
 80054b0:	08005485 	.word	0x08005485
 80054b4:	08005509 	.word	0x08005509
 80054b8:	08005485 	.word	0x08005485
 80054bc:	08005485 	.word	0x08005485
 80054c0:	08005485 	.word	0x08005485
 80054c4:	08005485 	.word	0x08005485
 80054c8:	08005615 	.word	0x08005615
 80054cc:	08005539 	.word	0x08005539
 80054d0:	080055f7 	.word	0x080055f7
 80054d4:	08005485 	.word	0x08005485
 80054d8:	08005485 	.word	0x08005485
 80054dc:	08005637 	.word	0x08005637
 80054e0:	08005485 	.word	0x08005485
 80054e4:	08005539 	.word	0x08005539
 80054e8:	08005485 	.word	0x08005485
 80054ec:	08005485 	.word	0x08005485
 80054f0:	080055ff 	.word	0x080055ff
 80054f4:	682b      	ldr	r3, [r5, #0]
 80054f6:	1d1a      	adds	r2, r3, #4
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	602a      	str	r2, [r5, #0]
 80054fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005504:	2301      	movs	r3, #1
 8005506:	e0a3      	b.n	8005650 <_printf_i+0x1f4>
 8005508:	6820      	ldr	r0, [r4, #0]
 800550a:	6829      	ldr	r1, [r5, #0]
 800550c:	0606      	lsls	r6, r0, #24
 800550e:	f101 0304 	add.w	r3, r1, #4
 8005512:	d50a      	bpl.n	800552a <_printf_i+0xce>
 8005514:	680e      	ldr	r6, [r1, #0]
 8005516:	602b      	str	r3, [r5, #0]
 8005518:	2e00      	cmp	r6, #0
 800551a:	da03      	bge.n	8005524 <_printf_i+0xc8>
 800551c:	232d      	movs	r3, #45	; 0x2d
 800551e:	4276      	negs	r6, r6
 8005520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005524:	485e      	ldr	r0, [pc, #376]	; (80056a0 <_printf_i+0x244>)
 8005526:	230a      	movs	r3, #10
 8005528:	e019      	b.n	800555e <_printf_i+0x102>
 800552a:	680e      	ldr	r6, [r1, #0]
 800552c:	602b      	str	r3, [r5, #0]
 800552e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005532:	bf18      	it	ne
 8005534:	b236      	sxthne	r6, r6
 8005536:	e7ef      	b.n	8005518 <_printf_i+0xbc>
 8005538:	682b      	ldr	r3, [r5, #0]
 800553a:	6820      	ldr	r0, [r4, #0]
 800553c:	1d19      	adds	r1, r3, #4
 800553e:	6029      	str	r1, [r5, #0]
 8005540:	0601      	lsls	r1, r0, #24
 8005542:	d501      	bpl.n	8005548 <_printf_i+0xec>
 8005544:	681e      	ldr	r6, [r3, #0]
 8005546:	e002      	b.n	800554e <_printf_i+0xf2>
 8005548:	0646      	lsls	r6, r0, #25
 800554a:	d5fb      	bpl.n	8005544 <_printf_i+0xe8>
 800554c:	881e      	ldrh	r6, [r3, #0]
 800554e:	4854      	ldr	r0, [pc, #336]	; (80056a0 <_printf_i+0x244>)
 8005550:	2f6f      	cmp	r7, #111	; 0x6f
 8005552:	bf0c      	ite	eq
 8005554:	2308      	moveq	r3, #8
 8005556:	230a      	movne	r3, #10
 8005558:	2100      	movs	r1, #0
 800555a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800555e:	6865      	ldr	r5, [r4, #4]
 8005560:	60a5      	str	r5, [r4, #8]
 8005562:	2d00      	cmp	r5, #0
 8005564:	bfa2      	ittt	ge
 8005566:	6821      	ldrge	r1, [r4, #0]
 8005568:	f021 0104 	bicge.w	r1, r1, #4
 800556c:	6021      	strge	r1, [r4, #0]
 800556e:	b90e      	cbnz	r6, 8005574 <_printf_i+0x118>
 8005570:	2d00      	cmp	r5, #0
 8005572:	d04d      	beq.n	8005610 <_printf_i+0x1b4>
 8005574:	4615      	mov	r5, r2
 8005576:	fbb6 f1f3 	udiv	r1, r6, r3
 800557a:	fb03 6711 	mls	r7, r3, r1, r6
 800557e:	5dc7      	ldrb	r7, [r0, r7]
 8005580:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005584:	4637      	mov	r7, r6
 8005586:	42bb      	cmp	r3, r7
 8005588:	460e      	mov	r6, r1
 800558a:	d9f4      	bls.n	8005576 <_printf_i+0x11a>
 800558c:	2b08      	cmp	r3, #8
 800558e:	d10b      	bne.n	80055a8 <_printf_i+0x14c>
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	07de      	lsls	r6, r3, #31
 8005594:	d508      	bpl.n	80055a8 <_printf_i+0x14c>
 8005596:	6923      	ldr	r3, [r4, #16]
 8005598:	6861      	ldr	r1, [r4, #4]
 800559a:	4299      	cmp	r1, r3
 800559c:	bfde      	ittt	le
 800559e:	2330      	movle	r3, #48	; 0x30
 80055a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055a8:	1b52      	subs	r2, r2, r5
 80055aa:	6122      	str	r2, [r4, #16]
 80055ac:	f8cd a000 	str.w	sl, [sp]
 80055b0:	464b      	mov	r3, r9
 80055b2:	aa03      	add	r2, sp, #12
 80055b4:	4621      	mov	r1, r4
 80055b6:	4640      	mov	r0, r8
 80055b8:	f7ff fee2 	bl	8005380 <_printf_common>
 80055bc:	3001      	adds	r0, #1
 80055be:	d14c      	bne.n	800565a <_printf_i+0x1fe>
 80055c0:	f04f 30ff 	mov.w	r0, #4294967295
 80055c4:	b004      	add	sp, #16
 80055c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ca:	4835      	ldr	r0, [pc, #212]	; (80056a0 <_printf_i+0x244>)
 80055cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80055d0:	6829      	ldr	r1, [r5, #0]
 80055d2:	6823      	ldr	r3, [r4, #0]
 80055d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80055d8:	6029      	str	r1, [r5, #0]
 80055da:	061d      	lsls	r5, r3, #24
 80055dc:	d514      	bpl.n	8005608 <_printf_i+0x1ac>
 80055de:	07df      	lsls	r7, r3, #31
 80055e0:	bf44      	itt	mi
 80055e2:	f043 0320 	orrmi.w	r3, r3, #32
 80055e6:	6023      	strmi	r3, [r4, #0]
 80055e8:	b91e      	cbnz	r6, 80055f2 <_printf_i+0x196>
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	f023 0320 	bic.w	r3, r3, #32
 80055f0:	6023      	str	r3, [r4, #0]
 80055f2:	2310      	movs	r3, #16
 80055f4:	e7b0      	b.n	8005558 <_printf_i+0xfc>
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	f043 0320 	orr.w	r3, r3, #32
 80055fc:	6023      	str	r3, [r4, #0]
 80055fe:	2378      	movs	r3, #120	; 0x78
 8005600:	4828      	ldr	r0, [pc, #160]	; (80056a4 <_printf_i+0x248>)
 8005602:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005606:	e7e3      	b.n	80055d0 <_printf_i+0x174>
 8005608:	0659      	lsls	r1, r3, #25
 800560a:	bf48      	it	mi
 800560c:	b2b6      	uxthmi	r6, r6
 800560e:	e7e6      	b.n	80055de <_printf_i+0x182>
 8005610:	4615      	mov	r5, r2
 8005612:	e7bb      	b.n	800558c <_printf_i+0x130>
 8005614:	682b      	ldr	r3, [r5, #0]
 8005616:	6826      	ldr	r6, [r4, #0]
 8005618:	6961      	ldr	r1, [r4, #20]
 800561a:	1d18      	adds	r0, r3, #4
 800561c:	6028      	str	r0, [r5, #0]
 800561e:	0635      	lsls	r5, r6, #24
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	d501      	bpl.n	8005628 <_printf_i+0x1cc>
 8005624:	6019      	str	r1, [r3, #0]
 8005626:	e002      	b.n	800562e <_printf_i+0x1d2>
 8005628:	0670      	lsls	r0, r6, #25
 800562a:	d5fb      	bpl.n	8005624 <_printf_i+0x1c8>
 800562c:	8019      	strh	r1, [r3, #0]
 800562e:	2300      	movs	r3, #0
 8005630:	6123      	str	r3, [r4, #16]
 8005632:	4615      	mov	r5, r2
 8005634:	e7ba      	b.n	80055ac <_printf_i+0x150>
 8005636:	682b      	ldr	r3, [r5, #0]
 8005638:	1d1a      	adds	r2, r3, #4
 800563a:	602a      	str	r2, [r5, #0]
 800563c:	681d      	ldr	r5, [r3, #0]
 800563e:	6862      	ldr	r2, [r4, #4]
 8005640:	2100      	movs	r1, #0
 8005642:	4628      	mov	r0, r5
 8005644:	f7fa fdd4 	bl	80001f0 <memchr>
 8005648:	b108      	cbz	r0, 800564e <_printf_i+0x1f2>
 800564a:	1b40      	subs	r0, r0, r5
 800564c:	6060      	str	r0, [r4, #4]
 800564e:	6863      	ldr	r3, [r4, #4]
 8005650:	6123      	str	r3, [r4, #16]
 8005652:	2300      	movs	r3, #0
 8005654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005658:	e7a8      	b.n	80055ac <_printf_i+0x150>
 800565a:	6923      	ldr	r3, [r4, #16]
 800565c:	462a      	mov	r2, r5
 800565e:	4649      	mov	r1, r9
 8005660:	4640      	mov	r0, r8
 8005662:	47d0      	blx	sl
 8005664:	3001      	adds	r0, #1
 8005666:	d0ab      	beq.n	80055c0 <_printf_i+0x164>
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	079b      	lsls	r3, r3, #30
 800566c:	d413      	bmi.n	8005696 <_printf_i+0x23a>
 800566e:	68e0      	ldr	r0, [r4, #12]
 8005670:	9b03      	ldr	r3, [sp, #12]
 8005672:	4298      	cmp	r0, r3
 8005674:	bfb8      	it	lt
 8005676:	4618      	movlt	r0, r3
 8005678:	e7a4      	b.n	80055c4 <_printf_i+0x168>
 800567a:	2301      	movs	r3, #1
 800567c:	4632      	mov	r2, r6
 800567e:	4649      	mov	r1, r9
 8005680:	4640      	mov	r0, r8
 8005682:	47d0      	blx	sl
 8005684:	3001      	adds	r0, #1
 8005686:	d09b      	beq.n	80055c0 <_printf_i+0x164>
 8005688:	3501      	adds	r5, #1
 800568a:	68e3      	ldr	r3, [r4, #12]
 800568c:	9903      	ldr	r1, [sp, #12]
 800568e:	1a5b      	subs	r3, r3, r1
 8005690:	42ab      	cmp	r3, r5
 8005692:	dcf2      	bgt.n	800567a <_printf_i+0x21e>
 8005694:	e7eb      	b.n	800566e <_printf_i+0x212>
 8005696:	2500      	movs	r5, #0
 8005698:	f104 0619 	add.w	r6, r4, #25
 800569c:	e7f5      	b.n	800568a <_printf_i+0x22e>
 800569e:	bf00      	nop
 80056a0:	08005a79 	.word	0x08005a79
 80056a4:	08005a8a 	.word	0x08005a8a

080056a8 <memcpy>:
 80056a8:	440a      	add	r2, r1
 80056aa:	4291      	cmp	r1, r2
 80056ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80056b0:	d100      	bne.n	80056b4 <memcpy+0xc>
 80056b2:	4770      	bx	lr
 80056b4:	b510      	push	{r4, lr}
 80056b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056be:	4291      	cmp	r1, r2
 80056c0:	d1f9      	bne.n	80056b6 <memcpy+0xe>
 80056c2:	bd10      	pop	{r4, pc}

080056c4 <memmove>:
 80056c4:	4288      	cmp	r0, r1
 80056c6:	b510      	push	{r4, lr}
 80056c8:	eb01 0402 	add.w	r4, r1, r2
 80056cc:	d902      	bls.n	80056d4 <memmove+0x10>
 80056ce:	4284      	cmp	r4, r0
 80056d0:	4623      	mov	r3, r4
 80056d2:	d807      	bhi.n	80056e4 <memmove+0x20>
 80056d4:	1e43      	subs	r3, r0, #1
 80056d6:	42a1      	cmp	r1, r4
 80056d8:	d008      	beq.n	80056ec <memmove+0x28>
 80056da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056e2:	e7f8      	b.n	80056d6 <memmove+0x12>
 80056e4:	4402      	add	r2, r0
 80056e6:	4601      	mov	r1, r0
 80056e8:	428a      	cmp	r2, r1
 80056ea:	d100      	bne.n	80056ee <memmove+0x2a>
 80056ec:	bd10      	pop	{r4, pc}
 80056ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056f6:	e7f7      	b.n	80056e8 <memmove+0x24>

080056f8 <_free_r>:
 80056f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056fa:	2900      	cmp	r1, #0
 80056fc:	d044      	beq.n	8005788 <_free_r+0x90>
 80056fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005702:	9001      	str	r0, [sp, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	f1a1 0404 	sub.w	r4, r1, #4
 800570a:	bfb8      	it	lt
 800570c:	18e4      	addlt	r4, r4, r3
 800570e:	f000 f913 	bl	8005938 <__malloc_lock>
 8005712:	4a1e      	ldr	r2, [pc, #120]	; (800578c <_free_r+0x94>)
 8005714:	9801      	ldr	r0, [sp, #4]
 8005716:	6813      	ldr	r3, [r2, #0]
 8005718:	b933      	cbnz	r3, 8005728 <_free_r+0x30>
 800571a:	6063      	str	r3, [r4, #4]
 800571c:	6014      	str	r4, [r2, #0]
 800571e:	b003      	add	sp, #12
 8005720:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005724:	f000 b90e 	b.w	8005944 <__malloc_unlock>
 8005728:	42a3      	cmp	r3, r4
 800572a:	d908      	bls.n	800573e <_free_r+0x46>
 800572c:	6825      	ldr	r5, [r4, #0]
 800572e:	1961      	adds	r1, r4, r5
 8005730:	428b      	cmp	r3, r1
 8005732:	bf01      	itttt	eq
 8005734:	6819      	ldreq	r1, [r3, #0]
 8005736:	685b      	ldreq	r3, [r3, #4]
 8005738:	1949      	addeq	r1, r1, r5
 800573a:	6021      	streq	r1, [r4, #0]
 800573c:	e7ed      	b.n	800571a <_free_r+0x22>
 800573e:	461a      	mov	r2, r3
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	b10b      	cbz	r3, 8005748 <_free_r+0x50>
 8005744:	42a3      	cmp	r3, r4
 8005746:	d9fa      	bls.n	800573e <_free_r+0x46>
 8005748:	6811      	ldr	r1, [r2, #0]
 800574a:	1855      	adds	r5, r2, r1
 800574c:	42a5      	cmp	r5, r4
 800574e:	d10b      	bne.n	8005768 <_free_r+0x70>
 8005750:	6824      	ldr	r4, [r4, #0]
 8005752:	4421      	add	r1, r4
 8005754:	1854      	adds	r4, r2, r1
 8005756:	42a3      	cmp	r3, r4
 8005758:	6011      	str	r1, [r2, #0]
 800575a:	d1e0      	bne.n	800571e <_free_r+0x26>
 800575c:	681c      	ldr	r4, [r3, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	6053      	str	r3, [r2, #4]
 8005762:	4421      	add	r1, r4
 8005764:	6011      	str	r1, [r2, #0]
 8005766:	e7da      	b.n	800571e <_free_r+0x26>
 8005768:	d902      	bls.n	8005770 <_free_r+0x78>
 800576a:	230c      	movs	r3, #12
 800576c:	6003      	str	r3, [r0, #0]
 800576e:	e7d6      	b.n	800571e <_free_r+0x26>
 8005770:	6825      	ldr	r5, [r4, #0]
 8005772:	1961      	adds	r1, r4, r5
 8005774:	428b      	cmp	r3, r1
 8005776:	bf04      	itt	eq
 8005778:	6819      	ldreq	r1, [r3, #0]
 800577a:	685b      	ldreq	r3, [r3, #4]
 800577c:	6063      	str	r3, [r4, #4]
 800577e:	bf04      	itt	eq
 8005780:	1949      	addeq	r1, r1, r5
 8005782:	6021      	streq	r1, [r4, #0]
 8005784:	6054      	str	r4, [r2, #4]
 8005786:	e7ca      	b.n	800571e <_free_r+0x26>
 8005788:	b003      	add	sp, #12
 800578a:	bd30      	pop	{r4, r5, pc}
 800578c:	20000270 	.word	0x20000270

08005790 <sbrk_aligned>:
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	4e0e      	ldr	r6, [pc, #56]	; (80057cc <sbrk_aligned+0x3c>)
 8005794:	460c      	mov	r4, r1
 8005796:	6831      	ldr	r1, [r6, #0]
 8005798:	4605      	mov	r5, r0
 800579a:	b911      	cbnz	r1, 80057a2 <sbrk_aligned+0x12>
 800579c:	f000 f8bc 	bl	8005918 <_sbrk_r>
 80057a0:	6030      	str	r0, [r6, #0]
 80057a2:	4621      	mov	r1, r4
 80057a4:	4628      	mov	r0, r5
 80057a6:	f000 f8b7 	bl	8005918 <_sbrk_r>
 80057aa:	1c43      	adds	r3, r0, #1
 80057ac:	d00a      	beq.n	80057c4 <sbrk_aligned+0x34>
 80057ae:	1cc4      	adds	r4, r0, #3
 80057b0:	f024 0403 	bic.w	r4, r4, #3
 80057b4:	42a0      	cmp	r0, r4
 80057b6:	d007      	beq.n	80057c8 <sbrk_aligned+0x38>
 80057b8:	1a21      	subs	r1, r4, r0
 80057ba:	4628      	mov	r0, r5
 80057bc:	f000 f8ac 	bl	8005918 <_sbrk_r>
 80057c0:	3001      	adds	r0, #1
 80057c2:	d101      	bne.n	80057c8 <sbrk_aligned+0x38>
 80057c4:	f04f 34ff 	mov.w	r4, #4294967295
 80057c8:	4620      	mov	r0, r4
 80057ca:	bd70      	pop	{r4, r5, r6, pc}
 80057cc:	20000274 	.word	0x20000274

080057d0 <_malloc_r>:
 80057d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d4:	1ccd      	adds	r5, r1, #3
 80057d6:	f025 0503 	bic.w	r5, r5, #3
 80057da:	3508      	adds	r5, #8
 80057dc:	2d0c      	cmp	r5, #12
 80057de:	bf38      	it	cc
 80057e0:	250c      	movcc	r5, #12
 80057e2:	2d00      	cmp	r5, #0
 80057e4:	4607      	mov	r7, r0
 80057e6:	db01      	blt.n	80057ec <_malloc_r+0x1c>
 80057e8:	42a9      	cmp	r1, r5
 80057ea:	d905      	bls.n	80057f8 <_malloc_r+0x28>
 80057ec:	230c      	movs	r3, #12
 80057ee:	603b      	str	r3, [r7, #0]
 80057f0:	2600      	movs	r6, #0
 80057f2:	4630      	mov	r0, r6
 80057f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f8:	4e2e      	ldr	r6, [pc, #184]	; (80058b4 <_malloc_r+0xe4>)
 80057fa:	f000 f89d 	bl	8005938 <__malloc_lock>
 80057fe:	6833      	ldr	r3, [r6, #0]
 8005800:	461c      	mov	r4, r3
 8005802:	bb34      	cbnz	r4, 8005852 <_malloc_r+0x82>
 8005804:	4629      	mov	r1, r5
 8005806:	4638      	mov	r0, r7
 8005808:	f7ff ffc2 	bl	8005790 <sbrk_aligned>
 800580c:	1c43      	adds	r3, r0, #1
 800580e:	4604      	mov	r4, r0
 8005810:	d14d      	bne.n	80058ae <_malloc_r+0xde>
 8005812:	6834      	ldr	r4, [r6, #0]
 8005814:	4626      	mov	r6, r4
 8005816:	2e00      	cmp	r6, #0
 8005818:	d140      	bne.n	800589c <_malloc_r+0xcc>
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	4631      	mov	r1, r6
 800581e:	4638      	mov	r0, r7
 8005820:	eb04 0803 	add.w	r8, r4, r3
 8005824:	f000 f878 	bl	8005918 <_sbrk_r>
 8005828:	4580      	cmp	r8, r0
 800582a:	d13a      	bne.n	80058a2 <_malloc_r+0xd2>
 800582c:	6821      	ldr	r1, [r4, #0]
 800582e:	3503      	adds	r5, #3
 8005830:	1a6d      	subs	r5, r5, r1
 8005832:	f025 0503 	bic.w	r5, r5, #3
 8005836:	3508      	adds	r5, #8
 8005838:	2d0c      	cmp	r5, #12
 800583a:	bf38      	it	cc
 800583c:	250c      	movcc	r5, #12
 800583e:	4629      	mov	r1, r5
 8005840:	4638      	mov	r0, r7
 8005842:	f7ff ffa5 	bl	8005790 <sbrk_aligned>
 8005846:	3001      	adds	r0, #1
 8005848:	d02b      	beq.n	80058a2 <_malloc_r+0xd2>
 800584a:	6823      	ldr	r3, [r4, #0]
 800584c:	442b      	add	r3, r5
 800584e:	6023      	str	r3, [r4, #0]
 8005850:	e00e      	b.n	8005870 <_malloc_r+0xa0>
 8005852:	6822      	ldr	r2, [r4, #0]
 8005854:	1b52      	subs	r2, r2, r5
 8005856:	d41e      	bmi.n	8005896 <_malloc_r+0xc6>
 8005858:	2a0b      	cmp	r2, #11
 800585a:	d916      	bls.n	800588a <_malloc_r+0xba>
 800585c:	1961      	adds	r1, r4, r5
 800585e:	42a3      	cmp	r3, r4
 8005860:	6025      	str	r5, [r4, #0]
 8005862:	bf18      	it	ne
 8005864:	6059      	strne	r1, [r3, #4]
 8005866:	6863      	ldr	r3, [r4, #4]
 8005868:	bf08      	it	eq
 800586a:	6031      	streq	r1, [r6, #0]
 800586c:	5162      	str	r2, [r4, r5]
 800586e:	604b      	str	r3, [r1, #4]
 8005870:	4638      	mov	r0, r7
 8005872:	f104 060b 	add.w	r6, r4, #11
 8005876:	f000 f865 	bl	8005944 <__malloc_unlock>
 800587a:	f026 0607 	bic.w	r6, r6, #7
 800587e:	1d23      	adds	r3, r4, #4
 8005880:	1af2      	subs	r2, r6, r3
 8005882:	d0b6      	beq.n	80057f2 <_malloc_r+0x22>
 8005884:	1b9b      	subs	r3, r3, r6
 8005886:	50a3      	str	r3, [r4, r2]
 8005888:	e7b3      	b.n	80057f2 <_malloc_r+0x22>
 800588a:	6862      	ldr	r2, [r4, #4]
 800588c:	42a3      	cmp	r3, r4
 800588e:	bf0c      	ite	eq
 8005890:	6032      	streq	r2, [r6, #0]
 8005892:	605a      	strne	r2, [r3, #4]
 8005894:	e7ec      	b.n	8005870 <_malloc_r+0xa0>
 8005896:	4623      	mov	r3, r4
 8005898:	6864      	ldr	r4, [r4, #4]
 800589a:	e7b2      	b.n	8005802 <_malloc_r+0x32>
 800589c:	4634      	mov	r4, r6
 800589e:	6876      	ldr	r6, [r6, #4]
 80058a0:	e7b9      	b.n	8005816 <_malloc_r+0x46>
 80058a2:	230c      	movs	r3, #12
 80058a4:	603b      	str	r3, [r7, #0]
 80058a6:	4638      	mov	r0, r7
 80058a8:	f000 f84c 	bl	8005944 <__malloc_unlock>
 80058ac:	e7a1      	b.n	80057f2 <_malloc_r+0x22>
 80058ae:	6025      	str	r5, [r4, #0]
 80058b0:	e7de      	b.n	8005870 <_malloc_r+0xa0>
 80058b2:	bf00      	nop
 80058b4:	20000270 	.word	0x20000270

080058b8 <_realloc_r>:
 80058b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058bc:	4680      	mov	r8, r0
 80058be:	4614      	mov	r4, r2
 80058c0:	460e      	mov	r6, r1
 80058c2:	b921      	cbnz	r1, 80058ce <_realloc_r+0x16>
 80058c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058c8:	4611      	mov	r1, r2
 80058ca:	f7ff bf81 	b.w	80057d0 <_malloc_r>
 80058ce:	b92a      	cbnz	r2, 80058dc <_realloc_r+0x24>
 80058d0:	f7ff ff12 	bl	80056f8 <_free_r>
 80058d4:	4625      	mov	r5, r4
 80058d6:	4628      	mov	r0, r5
 80058d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058dc:	f000 f838 	bl	8005950 <_malloc_usable_size_r>
 80058e0:	4284      	cmp	r4, r0
 80058e2:	4607      	mov	r7, r0
 80058e4:	d802      	bhi.n	80058ec <_realloc_r+0x34>
 80058e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80058ea:	d812      	bhi.n	8005912 <_realloc_r+0x5a>
 80058ec:	4621      	mov	r1, r4
 80058ee:	4640      	mov	r0, r8
 80058f0:	f7ff ff6e 	bl	80057d0 <_malloc_r>
 80058f4:	4605      	mov	r5, r0
 80058f6:	2800      	cmp	r0, #0
 80058f8:	d0ed      	beq.n	80058d6 <_realloc_r+0x1e>
 80058fa:	42bc      	cmp	r4, r7
 80058fc:	4622      	mov	r2, r4
 80058fe:	4631      	mov	r1, r6
 8005900:	bf28      	it	cs
 8005902:	463a      	movcs	r2, r7
 8005904:	f7ff fed0 	bl	80056a8 <memcpy>
 8005908:	4631      	mov	r1, r6
 800590a:	4640      	mov	r0, r8
 800590c:	f7ff fef4 	bl	80056f8 <_free_r>
 8005910:	e7e1      	b.n	80058d6 <_realloc_r+0x1e>
 8005912:	4635      	mov	r5, r6
 8005914:	e7df      	b.n	80058d6 <_realloc_r+0x1e>
	...

08005918 <_sbrk_r>:
 8005918:	b538      	push	{r3, r4, r5, lr}
 800591a:	4d06      	ldr	r5, [pc, #24]	; (8005934 <_sbrk_r+0x1c>)
 800591c:	2300      	movs	r3, #0
 800591e:	4604      	mov	r4, r0
 8005920:	4608      	mov	r0, r1
 8005922:	602b      	str	r3, [r5, #0]
 8005924:	f7fb fabe 	bl	8000ea4 <_sbrk>
 8005928:	1c43      	adds	r3, r0, #1
 800592a:	d102      	bne.n	8005932 <_sbrk_r+0x1a>
 800592c:	682b      	ldr	r3, [r5, #0]
 800592e:	b103      	cbz	r3, 8005932 <_sbrk_r+0x1a>
 8005930:	6023      	str	r3, [r4, #0]
 8005932:	bd38      	pop	{r3, r4, r5, pc}
 8005934:	20000278 	.word	0x20000278

08005938 <__malloc_lock>:
 8005938:	4801      	ldr	r0, [pc, #4]	; (8005940 <__malloc_lock+0x8>)
 800593a:	f000 b811 	b.w	8005960 <__retarget_lock_acquire_recursive>
 800593e:	bf00      	nop
 8005940:	2000027c 	.word	0x2000027c

08005944 <__malloc_unlock>:
 8005944:	4801      	ldr	r0, [pc, #4]	; (800594c <__malloc_unlock+0x8>)
 8005946:	f000 b80c 	b.w	8005962 <__retarget_lock_release_recursive>
 800594a:	bf00      	nop
 800594c:	2000027c 	.word	0x2000027c

08005950 <_malloc_usable_size_r>:
 8005950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005954:	1f18      	subs	r0, r3, #4
 8005956:	2b00      	cmp	r3, #0
 8005958:	bfbc      	itt	lt
 800595a:	580b      	ldrlt	r3, [r1, r0]
 800595c:	18c0      	addlt	r0, r0, r3
 800595e:	4770      	bx	lr

08005960 <__retarget_lock_acquire_recursive>:
 8005960:	4770      	bx	lr

08005962 <__retarget_lock_release_recursive>:
 8005962:	4770      	bx	lr

08005964 <_init>:
 8005964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005966:	bf00      	nop
 8005968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596a:	bc08      	pop	{r3}
 800596c:	469e      	mov	lr, r3
 800596e:	4770      	bx	lr

08005970 <_fini>:
 8005970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005972:	bf00      	nop
 8005974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005976:	bc08      	pop	{r3}
 8005978:	469e      	mov	lr, r3
 800597a:	4770      	bx	lr
